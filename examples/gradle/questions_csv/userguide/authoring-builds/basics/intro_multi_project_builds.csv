What is the primary purpose of a multi-project build in Gradle?<br><br>A. To manage a single project with multiple build files<br>B. To organize and link interdependent modules through a single build<br>C. To create a standalone application without dependencies<br>D. To simplify the build process for small projects,"<b>Correct Answer:</b> B<br><br>The primary purpose of a multi-project build in Gradle is to organize and link interdependent modules through a single build. This allows for better management of complex projects that consist of multiple subprojects, enabling shared configurations and dependencies among them."
Which file is essential for defining the structure of a multi-project build?<br><br>A. build.gradle.kts<br>B. settings.gradle.kts<br>C. gradlew<br>D. gradle-wrapper.properties,"<b>Correct Answer:</b> B<br><br>The `settings.gradle.kts` file is essential for defining the structure of a multi-project build. It includes all subprojects and establishes the relationships between them, allowing Gradle to recognize and manage the entire project hierarchy."
What is the role of the `buildSrc` directory in a multi-project build?<br><br>A. To store the main application code<br>B. To define and maintain shared build logic across subprojects<br>C. To manage external dependencies<br>D. To compile the final executable,"<b>Correct Answer:</b> B<br><br>The `buildSrc` directory in a multi-project build is used to define and maintain shared build logic across subprojects. It allows for the organization of common configurations, tasks, and plugins that can be reused by all subprojects, enhancing modularity and maintainability."
How does Gradle handle task execution in a multi-project build?<br><br>A. It executes tasks only in the root project<br>B. It executes tasks in all subprojects regardless of the command<br>C. It executes tasks based on the current working directory and project hierarchy<br>D. It requires manual specification of each subproject's tasks,"<b>Correct Answer:</b> C<br><br>Gradle handles task execution in a multi-project build by executing tasks based on the current working directory and project hierarchy. When a task is invoked, Gradle traverses the hierarchy to find and execute the corresponding tasks in the relevant subprojects, allowing for efficient management of complex builds."
What is a subproject in the context of a multi-project build?<br><br>A. A standalone project that does not depend on others<br>B. A module that is part of a larger project and can have its own build file<br>C. A project that only contains documentation<br>D. A project that cannot be built independently,"<b>Correct Answer:</b> B<br><br>A subproject is a module that is part of a larger multi-project build and can have its own build file. This allows for better organization and management of interdependent modules within a single build structure, facilitating shared logic and dependencies."
How does Gradle recognize subprojects in a multi-project build?<br><br>A. By their unique names only<br>B. Through the inclusion in the root project's settings file<br>C. By their location in the file system<br>D. By the presence of a README file,"<b>Correct Answer:</b> B<br><br>Gradle recognizes subprojects through their inclusion in the root project's settings file. This file specifies which subprojects are part of the multi-project build, allowing Gradle to manage dependencies and tasks across them effectively."
What is the purpose of having multiple subprojects in a Gradle build?<br><br>A. To create isolated builds that cannot share logic<br>B. To organize related modules that can share build logic and dependencies<br>C. To simplify the build process by reducing the number of files<br>D. To ensure that each module is built in complete isolation,"<b>Correct Answer:</b> B<br><br>The purpose of having multiple subprojects in a Gradle build is to organize related modules that can share build logic and dependencies. This structure allows for better management of complex projects, enabling efficient builds and easier maintenance of shared configurations."
Which file is essential for defining the structure of subprojects in a multi-project build?<br><br>A. build.gradle<br>B. settings.gradle<br>C. gradlew<br>D. gradle.properties,"<b>Correct Answer:</b> B<br><br>The settings.gradle file is essential for defining the structure of subprojects in a multi-project build. It includes the names of all subprojects, allowing Gradle to recognize and manage them as part of the overall build process."
What is the primary purpose of a multi-project build in Gradle?<br><br>A. To manage a single project with multiple build files<br>B. To organize and link interdependent modules through a single build<br>C. To create isolated builds without any dependencies<br>D. To simplify the build process for small applications,"<b>Correct Answer:</b> B<br><br>The primary purpose of a multi-project build in Gradle is to organize and link interdependent modules through a single build. This allows for better management of complex projects that consist of multiple subprojects, enabling shared configurations and dependencies among them."
Which file is essential for defining the structure of a multi-project build?<br><br>A. build.gradle.kts<br>B. settings.gradle.kts<br>C. gradlew<br>D. gradle-wrapper.properties,"<b>Correct Answer:</b> B<br><br>The `settings.gradle.kts` file is essential for defining the structure of a multi-project build. It includes all subprojects and establishes the relationships between them, allowing Gradle to recognize and manage the entire project hierarchy."
"In a multi-project build, what does the term 'subproject' refer to?<br><br>A. A project that is independent and does not share resources<br>B. A module that is part of a larger project and can depend on other modules<br>C. A temporary build configuration for testing purposes<br>D. A project that only contains documentation files","<b>Correct Answer:</b> B<br><br>In a multi-project build, a 'subproject' refers to a module that is part of a larger project and can depend on other modules. Subprojects allow for the organization of related functionalities and facilitate the sharing of build logic and dependencies within the overall project."
What is the role of the `buildSrc` directory in a multi-project build?<br><br>A. To store documentation for the project<br>B. To contain shared build logic and configurations for all subprojects<br>C. To manage external dependencies only<br>D. To serve as a backup for the main project files,"<b>Correct Answer:</b> B<br><br>The `buildSrc` directory in a multi-project build is used to contain shared build logic and configurations for all subprojects. It allows developers to define common tasks, plugins, and configurations that can be reused across different modules, streamlining the build process."
What is the primary purpose of using the `buildSrc` directory in a multi-project build?<br><br>A. To store all project source files<br>B. To define and maintain shared build logic<br>C. To manage project dependencies<br>D. To compile the main application code,"<b>Correct Answer:</b> B<br><br>The `buildSrc` directory is used in multi-project builds to define and maintain shared build logic, such as custom tasks or plugins. It allows for better organization and reuse of build configurations across different subprojects, making it easier to manage complex builds."
"In a multi-project build, what does the `settings.gradle.kts` file typically include?<br><br>A. The main application code<br>B. All subprojects in the build<br>C. The build dependencies for each subproject<br>D. The version control settings","<b>Correct Answer:</b> B<br><br>The `settings.gradle.kts` file is used to include all subprojects in a multi-project build. It defines the structure of the build and specifies which subprojects are part of the overall project, allowing Gradle to manage them collectively."
What is a key characteristic of composite builds in Gradle?<br><br>A. They are used to manage a single project only<br>B. They allow sharing logic between independent builds<br>C. They require all subprojects to be in the same directory<br>D. They cannot include external libraries,"<b>Correct Answer:</b> B<br><br>Composite builds in Gradle are designed to allow sharing logic between independent builds, rather than just subprojects. This enables developers to isolate and manage shared build logic effectively, making it easier to work on multiple projects that may have interdependencies."
How does Gradle determine the order of task execution in a multi-project build?<br><br>A. By the alphabetical order of project names<br>B. By the order in which projects are defined in the settings file<br>C. By the dependencies between projects<br>D. By the size of each project,"<b>Correct Answer:</b> C<br><br>Gradle determines the order of task execution in a multi-project build based on the dependencies between projects. If one project depends on another, Gradle will ensure that the dependent project is built first, maintaining the correct order of execution for tasks."
What is the primary purpose of composite builds in Gradle?<br><br>A. To share logic between subprojects within a single build<br>B. To isolate access to shared build logic and allow independent development<br>C. To combine multiple build files into a single executable<br>D. To enforce a strict hierarchy among project modules,"<b>Correct Answer:</b> B<br><br>The primary purpose of composite builds in Gradle is to isolate access to shared build logic and allow for independent development of that logic. This enables developers to work on plugins or shared configurations separately from the main project, promoting modularity and reusability."
Which file is essential for including a composite build in Gradle?<br><br>A. settings.gradle.kts<br>B. build.gradle.kts<br>C. gradlew<br>D. gradle.properties,"<b>Correct Answer:</b> A<br><br>The settings.gradle.kts file is essential for including a composite build in Gradle. It allows you to specify which builds to include using the `includeBuild` directive, thereby integrating the shared logic from the composite build into the main project."
How does Gradle treat the `build-logic` directory in a composite build?<br><br>A. As a regular subproject that must be built separately<br>B. As a special directory that is automatically included in the build<br>C. As a directory that cannot contain any build scripts<br>D. As a deprecated structure that should not be used,"<b>Correct Answer:</b> B<br><br>In a composite build, the `build-logic` directory is treated as a special directory that is automatically included in the build if it contains a build script. This allows for the encapsulation of shared build logic, making it accessible to the main project and its subprojects."
What is a key benefit of using composite builds in Gradle?<br><br>A. They simplify the project structure by merging all modules into one<br>B. They allow for the independent development and testing of shared logic<br>C. They eliminate the need for a settings file<br>D. They restrict the use of external plugins,"<b>Correct Answer:</b> B<br><br>A key benefit of using composite builds in Gradle is that they allow for the independent development and testing of shared logic. This modular approach enables teams to work on different aspects of a project without interfering with each other's work, facilitating better collaboration and code management."
What is the primary purpose of a project path in a multi-project build?<br><br>A. To define the hierarchy and relationships between projects<br>B. To specify the location of build files on the filesystem<br>C. To manage dependencies between external libraries<br>D. To execute tasks in parallel across multiple projects,"<b>Correct Answer:</b> A<br><br>The primary purpose of a project path in a multi-project build is to define the hierarchy and relationships between projects. It indicates how subprojects are organized under the root project, allowing Gradle to understand the structure and dependencies among them."
How does a project path typically begin in a multi-project build?<br><br>A. With a project name followed by a colon<br>B. With an optional colon denoting the root project<br>C. With a forward slash indicating the filesystem path<br>D. With a keyword specifying the project type,"<b>Correct Answer:</b> B<br><br>A project path typically begins with an optional colon, which denotes the root project. This structure allows for a clear representation of the hierarchy, where the root project is the only project not specified by its name."
What does the command `gradle projects` provide in the context of project paths?<br><br>A. A list of all available tasks in the project<br>B. A visual representation of the project dependencies<br>C. An overview of the project structure and paths<br>D. A detailed log of the build process,"<b>Correct Answer:</b> C<br><br>The command `gradle projects` provides an overview of the project structure and paths. It displays the hierarchy of the root project and its subprojects, helping users understand how the projects are organized within the multi-project build."
Which of the following statements about project paths is true?<br><br>A. Project paths must always reflect the physical directory structure.<br>B. Project paths can include multiple colons to denote nested subprojects.<br>C. Project paths are only relevant for composite builds.<br>D. Project paths are used to define the order of task execution.,"<b>Correct Answer:</b> B<br><br>Project paths can include multiple colons to denote nested subprojects, allowing for a clear representation of the hierarchy within a multi-project build. This flexibility enables Gradle to manage complex project structures effectively."
What is the primary purpose of executing tasks in a multi-project build?<br><br>A. To run tasks across all subprojects simultaneously<br>B. To control which project's tasks get executed based on the current directory<br>C. To compile only the root project without considering subprojects<br>D. To execute tasks in a random order across subprojects,"<b>Correct Answer:</b> B<br><br>The primary purpose of executing tasks in a multi-project build is to control which project's tasks get executed based on the current working directory. This allows for targeted execution of tasks in specific subprojects, rather than running all tasks across all subprojects at once."
How can you execute a specific task in a particular subproject?<br><br>A. By using the task's name only<br>B. By using the fully qualified name of the task<br>C. By running the task from the root project directory only<br>D. By specifying the task in the settings.gradle file,"<b>Correct Answer:</b> B<br><br>To execute a specific task in a particular subproject, you can use the fully qualified name of the task, which includes the project path followed by the task name. This allows you to target a specific task within a specific subproject."
What does the `buildNeeded` task do in a multi-project build?<br><br>A. It builds and tests all projects that depend on the specified project<br>B. It compiles only the specified project without testing<br>C. It builds and tests all projects from the project dependencies of the specified project<br>D. It runs all tasks in the root project only,<b>Correct Answer:</b> C<br><br>The `buildNeeded` task builds and tests all projects from the project dependencies of the specified project. This is useful when changes in a project require building and testing its dependencies to ensure everything works correctly.
What is the effect of running a task from the root project directory in a multi-project build?<br><br>A. Only the root project task will execute<br>B. The task will execute in all subprojects with that name<br>C. No tasks will execute if the root project has no tasks<br>D. Only the first subproject will execute the task,"<b>Correct Answer:</b> B<br><br>When a task is run from the root project directory in a multi-project build, the task will execute in all subprojects that have that task defined. This allows for a comprehensive execution of tasks across the entire project hierarchy."
What is the primary purpose of defining dependencies in a multi-project build?<br><br>A. To ensure that all subprojects can be built independently<br>B. To manage the order of task execution across subprojects<br>C. To link subprojects together and control their build order<br>D. To create a single build file for all subprojects,"<b>Correct Answer:</b> C<br><br>The primary purpose of defining dependencies in a multi-project build is to link subprojects together and control their build order. This ensures that when one subproject depends on another, the dependent subproject is built first, allowing for a coherent build process that respects the relationships between modules."
Which command would you use to build all projects in a multi-project build?<br><br>A. gradle buildAll<br>B. gradle build<br>C. gradle all:build<br>D. gradle compile,"<b>Correct Answer:</b> B<br><br>To build all projects in a multi-project build, you would use the command 'gradle build'. This command triggers the build task for all subprojects, ensuring that each project is compiled, tested, and checked as part of the overall build process."
What is the role of the `buildSrc` directory in a multi-project build?<br><br>A. To store the source code for the main application<br>B. To define and maintain shared build logic across subprojects<br>C. To contain the configuration files for each subproject<br>D. To manage external dependencies for the entire project,"<b>Correct Answer:</b> B<br><br>The `buildSrc` directory in a multi-project build is used to define and maintain shared build logic across subprojects. It allows developers to centralize common configurations, tasks, and plugins that can be reused by all subprojects, promoting consistency and reducing duplication."
How does Gradle handle task execution in a multi-project build when a task is called by name?<br><br>A. It executes the task only in the root project<br>B. It executes the task in all subprojects regardless of their dependencies<br>C. It executes the task in all subprojects that have that task defined<br>D. It ignores the task if it is not found in the root project,"<b>Correct Answer:</b> C<br><br>When a task is called by name in a multi-project build, Gradle executes that task in all subprojects that have that task defined. This allows for efficient execution of tasks across multiple modules, ensuring that relevant tasks are run where applicable."
