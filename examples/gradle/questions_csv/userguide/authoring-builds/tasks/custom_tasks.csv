What is the primary benefit of using incremental tasks in Gradle?<br><br>A. To ensure all input files are processed every time a task runs<br>B. To improve build performance by processing only out-of-date inputs<br>C. To eliminate the need for task dependencies<br>D. To automatically generate output files for all inputs,"<b>Correct Answer:</b> B<br><br>The primary benefit of using incremental tasks in Gradle is to improve build performance by processing only out-of-date inputs. This means that if only a few input files have changed, the task will only reprocess those files instead of all inputs, leading to faster build times."
Which annotation is required for a task to process inputs incrementally?<br><br>A. @TaskAction<br>B. @Incremental<br>C. @Input<br>D. @Output,"<b>Correct Answer:</b> B<br><br>To process inputs incrementally, a task must contain the @Incremental annotation. This annotation indicates that the task action will only process the changed inputs, allowing Gradle to optimize the build process."
"What does the method `InputChanges.getFileChanges()` provide?<br><br>A. A list of all input files regardless of their state<br>B. Details about which input files have been added, removed, or modified<br>C. The total number of input files processed<br>D. A summary of the task's execution time","<b>Correct Answer:</b> B<br><br>`InputChanges.getFileChanges()` provides details about which input files have been added, removed, or modified since the last execution of the task. This information is crucial for incremental tasks to determine which files need to be processed."
What happens when a task is executed non-incrementally in Gradle?<br><br>A. Only the changed inputs are processed<br>B. All input files are treated as added<br>C. The task is skipped entirely<br>D. Only output files are updated,"<b>Correct Answer:</b> B<br><br>When a task is executed non-incrementally, all input files are treated as added, regardless of their actual state. This occurs when there is no history available from a previous execution or when certain conditions prevent incremental execution."
What is the primary benefit of using incremental tasks in a build process?<br><br>A. To ensure all input files are processed every time<br>B. To improve build performance by processing only changed inputs<br>C. To eliminate the need for any input files<br>D. To automatically generate output files without any input,"<b>Correct Answer:</b> B<br><br>The primary benefit of using incremental tasks is to improve build performance by processing only the input files that have changed since the last execution. This avoids unnecessary reprocessing of unchanged inputs, making the build process more efficient."
Which of the following is a requirement for a task to be considered incremental?<br><br>A. It must have multiple output directories<br>B. It must contain an incremental task action with an InputChanges parameter<br>C. It must process all input files regardless of changes<br>D. It must be executed in a non-incremental mode,"<b>Correct Answer:</b> B<br><br>For a task to be considered incremental, it must contain an incremental task action that includes an InputChanges parameter. This allows the task to determine which inputs have changed and only process those, thus optimizing performance."
What happens when a task is executed non-incrementally?<br><br>A. Only the changed inputs are processed<br>B. All input files are treated as new and processed<br>C. No input files are processed at all<br>D. The task is skipped entirely,"<b>Correct Answer:</b> B<br><br>When a task is executed non-incrementally, all input files are treated as new and processed. This occurs when there is no history from a previous execution or when certain conditions prevent incremental execution, leading to all inputs being reported as added."
Which method is used to query the changes in input files for an incremental task?<br><br>A. getFileChanges()<br>B. getInputFiles()<br>C. getChangedFiles()<br>D. getUpdatedFiles(),"<b>Correct Answer:</b> A<br><br>The method used to query the changes in input files for an incremental task is getFileChanges(). This method provides details about which input files have been added, removed, or modified since the last execution, allowing the task to process only the necessary files."
What is the primary purpose of a task action in Gradle?<br><br>A. To define the inputs and outputs of a task<br>B. To execute the logic that processes the task's inputs<br>C. To configure the build environment for the task<br>D. To declare dependencies between tasks,"<b>Correct Answer:</b> B<br><br>The primary purpose of a task action in Gradle is to execute the logic that processes the task's inputs. Task actions contain the code that runs when the task is executed, allowing for the transformation or manipulation of input data to produce outputs."
Which parameter is essential for a task action to process inputs incrementally?<br><br>A. InputChanges<br>B. TaskProperties<br>C. FileCollection<br>D. TaskOutputs,"<b>Correct Answer:</b> A<br><br>The essential parameter for a task action to process inputs incrementally is the InputChanges parameter. This parameter allows the task action to determine which inputs have changed since the last execution, enabling efficient processing by only handling out-of-date inputs."
What must a task action include to be considered incremental?<br><br>A. Multiple input properties<br>B. A single InputChanges parameter<br>C. A list of output files<br>D. A configuration block for dependencies,"<b>Correct Answer:</b> B<br><br>To be considered incremental, a task action must include a single InputChanges parameter. This allows the task to identify which inputs have changed and process only those, improving build performance by avoiding unnecessary work."
What happens if a task is executed non-incrementally?<br><br>A. Only modified inputs are processed<br>B. All inputs are treated as new and processed<br>C. The task is skipped entirely<br>D. Only outputs are generated without processing inputs,"<b>Correct Answer:</b> B<br><br>If a task is executed non-incrementally, all inputs are treated as new and processed. This occurs when there is no history from a previous execution or when certain conditions prevent incremental execution, leading to all inputs being reported as added."
What is the purpose of the `InputChanges` parameter in an incremental task?<br><br>A. To provide details about which input files have changed since the last execution<br>B. To define the output files generated by the task<br>C. To specify the dependencies of the task<br>D. To configure the execution environment for the task,"<b>Correct Answer:</b> A<br><br>The `InputChanges` parameter is used in an incremental task to provide details about which input files have changed since the last execution. This allows the task to process only the files that are out-of-date, improving efficiency by avoiding unnecessary reprocessing of unchanged inputs."
Which of the following scenarios would cause Gradle to treat all input files as 'ADDED'?<br><br>A. When only some input files have changed since the last execution<br>B. When the task is executed for the first time<br>C. When the output files have been modified<br>D. When the task is executed with the `--rerun-tasks` option,"<b>Correct Answer:</b> D<br><br>When the task is executed with the `--rerun-tasks` option, Gradle treats all input files as 'ADDED', regardless of their actual state. This is because the option forces a non-incremental execution, meaning that Gradle cannot determine which inputs are out-of-date based on previous executions."
What must be declared for a task to process inputs incrementally?<br><br>A. At least one output file property<br>B. An incremental task action with an `InputChanges` parameter<br>C. A list of all possible input files<br>D. A command-line option for the task,"<b>Correct Answer:</b> B<br><br>For a task to process inputs incrementally, it must contain an incremental task action that includes an `InputChanges` parameter. This parameter allows the task to identify which inputs have changed and should be processed, enabling efficient execution."
What happens if a non-incremental input file property is modified?<br><br>A. Only the modified input file is processed<br>B. All input files are treated as 'ADDED'<br>C. The task is skipped entirely<br>D. The task runs incrementally as usual,"<b>Correct Answer:</b> B<br><br>If a non-incremental input file property is modified, Gradle cannot determine how the change impacts the task outputs. As a result, all input files are treated as 'ADDED', and the task is executed non-incrementally, processing all inputs."
What is the purpose of command line options in Gradle tasks?<br><br>A. To allow users to specify values for task properties at runtime<br>B. To define the order of task execution<br>C. To automatically generate build scripts<br>D. To manage dependencies between tasks,"<b>Correct Answer:</b> A<br><br>Command line options in Gradle tasks are used to allow users to specify values for task properties at runtime. This flexibility enables users to customize the behavior of tasks without modifying the build script directly, making it easier to adapt to different scenarios."
Which annotation is used to declare a command line option for a task property?<br><br>A. @Input<br>B. @Option<br>C. @TaskAction<br>D. @Incremental,"<b>Correct Answer:</b> B<br><br>The @Option annotation is used to declare a command line option for a task property. This annotation allows the task to expose a property that can be set via the command line, providing a way to customize task execution dynamically."
What happens if a command line option is not provided when executing a Gradle task?<br><br>A. The task will fail to execute<br>B. The task will use the default value of the property<br>C. The task will ignore the property entirely<br>D. The task will prompt the user for input,"<b>Correct Answer:</b> B<br><br>If a command line option is not provided when executing a Gradle task, the task will use the default value of the property. This allows tasks to have sensible defaults while still providing the flexibility to override them when needed."
Which of the following is a limitation of command line options in Gradle?<br><br>A. They can only be declared for custom tasks<br>B. They can be declared globally for all tasks<br>C. They can accept any arbitrary value without restrictions<br>D. They can only be used with boolean properties,"<b>Correct Answer:</b> A<br><br>A limitation of command line options in Gradle is that they can only be declared for custom tasks via annotation. There is no programmatic equivalent for defining options, and they cannot be declared globally for all tasks or plugins."
What is a verification failure in Gradle?<br><br>A. A failure that prevents all subsequent tasks from executing.<br>B. A controlled failure that allows downstream tasks to run despite the failure.<br>C. A failure that occurs when a task's output is invalid.<br>D. A failure that is automatically retried by Gradle.,<b>Correct Answer:</b> B<br><br>A verification failure in Gradle is a controlled failure that allows downstream tasks to continue executing even if the task that produced the output has failed. This is useful for tasks that need to report a failure while still providing valid outputs for other tasks to consume.
When does a task throw a verification failure?<br><br>A. When it encounters an exception during execution.<br>B. When it produces outputs that are invalid.<br>C. When it needs to indicate a failure while still providing valid outputs.<br>D. When it is unable to find its input files.,"<b>Correct Answer:</b> C<br><br>A task throws a verification failure when it needs to indicate that it has failed in a controlled manner, allowing it to still produce outputs that are valid for other tasks. This allows downstream tasks to run even if the producing task has encountered an issue."
What happens when a task fails with a verification failure and the build is run with the `--continue` flag?<br><br>A. All tasks will be skipped.<br>B. Only the failed task will be retried.<br>C. Downstream tasks that depend on the output of the failed task can still execute.<br>D. The build will terminate immediately.,"<b>Correct Answer:</b> C<br><br>When a task fails with a verification failure and the build is run with the `--continue` flag, downstream tasks that depend on the output of the failed task can still execute. This allows for partial results to be processed even if the producing task has encountered a failure."
Which of the following statements is true regarding verification failures?<br><br>A. They are used to stop the build process completely.<br>B. They allow for the continuation of tasks that depend on valid outputs.<br>C. They indicate that all outputs produced are invalid.<br>D. They are automatically resolved by Gradle without user intervention.,"<b>Correct Answer:</b> B<br><br>Verification failures allow for the continuation of tasks that depend on valid outputs, even if the task that produced those outputs has failed. This mechanism is useful for maintaining build progress while still reporting issues in specific tasks."
