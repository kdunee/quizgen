What is the primary purpose of initialization scripts in Gradle?<br><br>A. To run after the build script is executed<br>B. To customize the build environment before the build script runs<br>C. To compile the source code of the project<br>D. To manage dependencies for the project,"<b>Correct Answer:</b> B<br><br>Initialization scripts are designed to customize the build environment or configure settings before the build script is executed. They allow for setting up common configurations across multiple projects, making them essential for establishing a consistent build environment."
Which of the following is NOT a use case for initialization scripts?<br><br>A. Setting up enterprise-wide configurations<br>B. Configuring properties based on the environment<br>C. Compiling Java source files<br>D. Registering build listeners,"<b>Correct Answer:</b> C<br><br>Compiling Java source files is not a use case for initialization scripts. Instead, initialization scripts are used for setting up configurations, properties, and listeners before the build process begins, rather than for the actual compilation of code."
How can you invoke an init script in Gradle?<br><br>A. By including it in the build.gradle file<br>B. By specifying it on the command line with the -I option<br>C. By placing it in the src/main/resources directory<br>D. By running it as a standalone application,<b>Correct Answer:</b> B<br><br>An init script can be invoked by specifying it on the command line using the -I or --init-script option followed by the path to the script. This allows for flexibility in how and when the init script is executed during the Gradle build process.
What is a limitation of using initialization scripts in Gradle?<br><br>A. They cannot be used to configure project dependencies<br>B. They cannot access classes in the buildSrc project<br>C. They can only be written in Groovy<br>D. They can only be executed once per build,"<b>Correct Answer:</b> B<br><br>A key limitation of initialization scripts is that they cannot access classes in the buildSrc project. This means that while they can configure various aspects of the build environment, they are restricted from utilizing custom classes defined in the buildSrc directory."
What is the primary purpose of initialization scripts in Gradle?<br><br>A. To run after the build script is executed<br>B. To customize the build environment before the build script runs<br>C. To compile the source code of the project<br>D. To manage dependencies for the project,"<b>Correct Answer:</b> B<br><br>The primary purpose of initialization scripts in Gradle is to customize the build environment before the build script runs. They allow users to set up configurations, properties, and other settings that are necessary for the build process, ensuring that the environment is tailored to specific needs."
Which of the following is NOT a use case for initialization scripts?<br><br>A. Setting up enterprise-wide configurations<br>B. Configuring properties based on the environment<br>C. Compiling Java source files<br>D. Registering build listeners,"<b>Correct Answer:</b> C<br><br>Compiling Java source files is not a use case for initialization scripts. Instead, initialization scripts are used for setting up configurations, properties, and listeners before the build process begins, while the actual compilation of source files is handled during the build script execution."
How can you invoke an init script in Gradle?<br><br>A. By including it in the build.gradle file<br>B. By specifying it on the command line with the -I option<br>C. By placing it in the src/main/resources directory<br>D. By adding it to the settings.gradle file,"<b>Correct Answer:</b> B<br><br>You can invoke an init script in Gradle by specifying it on the command line with the -I option, followed by the path to the script. This allows you to customize the build environment dynamically when executing a Gradle build."
What is a limitation of init scripts in Gradle?<br><br>A. They can only be written in Groovy<br>B. They cannot access classes in the buildSrc project<br>C. They can only be used for single-project builds<br>D. They cannot register build listeners,"<b>Correct Answer:</b> B<br><br>A limitation of init scripts in Gradle is that they cannot access classes in the buildSrc project. This means that while init scripts can customize the build environment, they are restricted from utilizing custom classes defined in the buildSrc directory."
What is the primary purpose of initialization scripts in Gradle?<br><br>A. To run after the build script is executed<br>B. To customize the build environment before the build script runs<br>C. To compile the source code of the project<br>D. To manage dependencies for the project,"<b>Correct Answer:</b> B<br><br>Initialization scripts are designed to customize the build environment or configure settings before the build script is executed. They allow for setting up common configurations across multiple projects, making them essential for establishing a consistent build environment."
Which of the following is NOT a use case for initialization scripts?<br><br>A. Setting up enterprise-wide configurations<br>B. Configuring properties based on the environment<br>C. Compiling Java source files<br>D. Registering build listeners,"<b>Correct Answer:</b> C<br><br>Compiling Java source files is not a use case for initialization scripts. Instead, initialization scripts are used for setting up configurations, properties, and listeners before the build process begins, rather than for the actual compilation of code."
How can you invoke an init script in Gradle?<br><br>A. By including it in the build.gradle file<br>B. By specifying it on the command line with the -I option<br>C. By placing it in the src/main/resources directory<br>D. By running it as a standalone application,<b>Correct Answer:</b> B<br><br>An init script can be invoked by specifying it on the command line using the -I or --init-script option followed by the path to the script. This allows for flexibility in executing different init scripts as needed during the build process.
What is a limitation of init scripts in Gradle?<br><br>A. They cannot run before the build script<br>B. They cannot access classes in the buildSrc project<br>C. They can only be written in Groovy<br>D. They cannot register build listeners,"<b>Correct Answer:</b> B<br><br>A key limitation of init scripts is that they cannot access classes in the buildSrc project. This means that while they can configure the build environment, they are restricted from utilizing custom classes defined in the buildSrc directory."
What is the primary purpose of using an init script in a Gradle build?<br><br>A. To run the build script after the project is evaluated<br>B. To customize the build environment before the build script is executed<br>C. To compile the source code of the project<br>D. To manage dependencies for the project,"<b>Correct Answer:</b> B<br><br>The primary purpose of using an init script in a Gradle build is to customize the build environment before the build script is executed. Init scripts allow for early configuration of settings, repositories, and plugins, which can be beneficial for setting up common configurations across multiple projects."
Which of the following is NOT a typical use case for an init script?<br><br>A. Setting up enterprise-wide configurations<br>B. Configuring properties based on the environment<br>C. Compiling Java source files<br>D. Registering build listeners,"<b>Correct Answer:</b> C<br><br>Compiling Java source files is not a typical use case for an init script. Init scripts are primarily used for configuring the build environment and settings before the actual build script runs, rather than for compiling code, which is handled by the build script itself."
How can you invoke an init script in Gradle?<br><br>A. By including it in the build.gradle file<br>B. By specifying it on the command line with the -I option<br>C. By placing it in the src/main/resources directory<br>D. By adding it to the settings.gradle file,"<b>Correct Answer:</b> B<br><br>You can invoke an init script in Gradle by specifying it on the command line with the -I option, followed by the path to the script. This allows you to run the init script before the build starts, enabling early configuration of the build environment."
What is a limitation of init scripts in Gradle?<br><br>A. They can only be used in multi-project builds<br>B. They cannot access classes in the buildSrc project<br>C. They must be written in Java only<br>D. They can only configure repositories,"<b>Correct Answer:</b> B<br><br>A limitation of init scripts in Gradle is that they cannot access classes in the buildSrc project. This means that while init scripts can perform various configurations, they are restricted from utilizing custom classes defined in the buildSrc directory."
What is the primary purpose of dependency management in the context of init scripts?<br><br>A. To define the build environment and configurations<br>B. To declare and manage external libraries and dependencies<br>C. To execute build tasks in parallel<br>D. To optimize the performance of the build process,"<b>Correct Answer:</b> B<br><br>The primary purpose of dependency management in init scripts is to declare and manage external libraries and dependencies that the script requires. This allows the init script to utilize additional classes and functionalities that are not part of the core Gradle distribution, enhancing the capabilities of the build process."
Which method is used in init scripts to declare external dependencies?<br><br>A. apply()<br>B. dependencies()<br>C. initscript()<br>D. include(),"<b>Correct Answer:</b> C<br><br>The method used in init scripts to declare external dependencies is `initscript()`. This method allows the user to specify the classpath for the init script, enabling the inclusion of external libraries that can be utilized within the script."
How are dependencies declared in an init script's classpath?<br><br>A. By using the apply() method to include them<br>B. By adding them to the classpath configuration within the initscript() method<br>C. By specifying them in the build.gradle file<br>D. By listing them in the settings.gradle file,<b>Correct Answer:</b> B<br><br>Dependencies in an init script's classpath are declared by adding them to the classpath configuration within the `initscript()` method. This allows the init script to access and use the specified external libraries during its execution.
What is a limitation of using init scripts for dependency management?<br><br>A. They cannot declare external dependencies<br>B. They cannot access classes in the buildSrc project<br>C. They can only manage dependencies for specific projects<br>D. They can only be executed in a CI environment,"<b>Correct Answer:</b> B<br><br>A limitation of using init scripts for dependency management is that they cannot access classes in the `buildSrc` project. This means that any custom classes or logic defined in the `buildSrc` directory are not available to init scripts, which can restrict their functionality."
What is the primary purpose of applying plugins in an init script?<br><br>A. To define custom tasks for the build process<br>B. To configure the build environment and settings<br>C. To manage dependencies for the project<br>D. To execute the build script without any configurations,"<b>Correct Answer:</b> B<br><br>The primary purpose of applying plugins in an init script is to configure the build environment and settings. Plugins allow users to extend the functionality of Gradle by adding specific capabilities, such as defining repositories or customizing build behavior, which can be crucial for setting up a consistent build environment across projects."
How does Gradle handle the application of plugins in an init script?<br><br>A. Plugins are applied automatically without any user intervention.<br>B. Gradle instantiates the plugin and calls its apply method with the gradle object.<br>C. Plugins can only be applied after the build script has been executed.<br>D. Plugins must be defined in a separate configuration file outside the init script.,"<b>Correct Answer:</b> B<br><br>When applying plugins within an init script, Gradle instantiates the plugin and calls the plugin's apply method, passing the gradle object as a parameter. This allows the plugin to configure various aspects of the build process directly within the init script, enhancing its functionality."
What is a limitation of using init scripts in Gradle?<br><br>A. They cannot be used to configure repositories.<br>B. They cannot access classes in the buildSrc project.<br>C. They can only be executed in a specific order.<br>D. They do not support external dependencies.,"<b>Correct Answer:</b> B<br><br>A key limitation of init scripts is that they cannot access classes in the buildSrc project. This means that while init scripts can configure the build environment and apply plugins, they are restricted from utilizing custom classes defined in the buildSrc directory, which can limit their functionality in certain scenarios."
