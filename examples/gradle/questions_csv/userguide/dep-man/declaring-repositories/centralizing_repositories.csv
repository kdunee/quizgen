What is the primary benefit of centralizing repository declarations in Gradle?<br><br>A. To reduce redundancy and ensure consistency across projects<br>B. To allow each subproject to declare its own repositories independently<br>C. To increase the complexity of build configurations<br>D. To eliminate the need for any repository declarations,"<b>Correct Answer:</b> A<br><br>Centralizing repository declarations in Gradle helps reduce redundancy and ensures consistency across all projects. By declaring repositories in a central location, teams can manage dependencies more effectively and maintain uniformity in repository usage across subprojects."
Which file is primarily used to declare repositories centrally in Gradle?<br><br>A. build.gradle<br>B. settings.gradle<br>C. gradle.properties<br>D. settings.gradle.kts,"<b>Correct Answer:</b> B<br><br>The `settings.gradle` file is primarily used to declare repositories centrally in Gradle. This allows for a single point of configuration for repositories that can be applied to all subprojects, simplifying dependency management."
What does the `repositoriesMode` setting control in Gradle?<br><br>A. The visibility of repositories to external users<br>B. The behavior of repository declarations between project and settings files<br>C. The type of repositories that can be declared<br>D. The order in which dependencies are resolved,"<b>Correct Answer:</b> B<br><br>The `repositoriesMode` setting in Gradle controls the behavior of repository declarations between project and settings files. It determines whether repositories declared in a project override those declared in `settings.gradle` or vice versa, allowing for flexible management of dependencies."
What happens when the `FAIL_ON_PROJECT_REPOS` mode is enabled?<br><br>A. Repositories declared in projects are ignored<br>B. A build error is triggered if a project declares a repository<br>C. All repositories are automatically approved<br>D. Only settings.gradle repositories are used without any restrictions,"<b>Correct Answer:</b> B<br><br>When the `FAIL_ON_PROJECT_REPOS` mode is enabled, declaring a repository in a project triggers a build error. This mode strictly enforces the use of repositories declared in `settings.gradle`, ensuring that only approved repositories are utilized in the build process."
What is the primary purpose of dependency resolution management in Gradle?<br><br>A. To centralize the declaration of repositories for all projects<br>B. To manage the versioning of project dependencies<br>C. To optimize the build performance of Gradle scripts<br>D. To enforce coding standards across projects,"<b>Correct Answer:</b> A<br><br>The primary purpose of dependency resolution management in Gradle is to centralize the declaration of repositories for all projects. This allows for a more organized and efficient way to manage dependencies, ensuring that all subprojects can access the same repositories without needing to declare them individually."
Which of the following modes allows project repositories to override those declared in settings.gradle?<br><br>A. FAIL_ON_PROJECT_REPOS<br>B. PREFER_SETTINGS<br>C. PREFER_PROJECT<br>D. DEFAULT_MODE,<b>Correct Answer:</b> C<br><br>The PREFER_PROJECT mode allows repositories declared in a project to override those declared in settings.gradle. This mode is useful when different subprojects require specific repositories that may differ from the centralized settings.
What happens when the FAIL_ON_PROJECT_REPOS mode is enabled?<br><br>A. Repositories declared in settings.gradle are ignored.<br>B. A build error is triggered if a project declares a repository.<br>C. All repositories are treated equally regardless of their declaration location.<br>D. Only repositories declared in the project are used.,"<b>Correct Answer:</b> B<br><br>When the FAIL_ON_PROJECT_REPOS mode is enabled, declaring a repository in a project triggers a build error. This mode strictly enforces the use of repositories declared only in settings.gradle, ensuring consistency across the project."
What is the default behavior of repository declarations in Gradle projects?<br><br>A. Repositories in settings.gradle always take precedence.<br>B. Repositories in a project override those in settings.gradle.<br>C. Repositories must be declared in both settings.gradle and project files.<br>D. Repositories are ignored unless explicitly declared in the project.,"<b>Correct Answer:</b> B<br><br>By default, repositories declared in a project's build.gradle file will override those declared in settings.gradle. This allows for flexibility in managing dependencies at the project level, but can lead to inconsistencies if not managed carefully."
What is the primary purpose of centralizing repository declarations in Gradle?<br><br>A. To simplify the management of dependencies across multiple subprojects<br>B. To increase the complexity of build configurations<br>C. To allow each subproject to declare its own repositories independently<br>D. To eliminate the need for any repository declarations,"<b>Correct Answer:</b> A<br><br>The primary purpose of centralizing repository declarations in Gradle is to simplify the management of dependencies across multiple subprojects. By declaring repositories in a central location, such as the `settings.gradle(.kts)` file, teams can ensure consistent access to the same repositories without needing to repeat declarations in each subproject."
Which mode in Gradle allows repositories declared in a project to override those declared in `settings.gradle(.kts)`?<br><br>A. PREFER_SETTINGS<br>B. FAIL_ON_PROJECT_REPOS<br>C. PREFER_PROJECT<br>D. DEFAULT_MODE,<b>Correct Answer:</b> C<br><br>The `PREFER_PROJECT` mode allows repositories declared in a project to override those declared in `settings.gradle(.kts)`. This mode is useful when different subprojects require specific repositories that may not be applicable to all projects.
What happens when the `FAIL_ON_PROJECT_REPOS` mode is enabled in Gradle?<br><br>A. Repositories declared in projects are ignored completely<br>B. A build error is triggered if a project declares a repository<br>C. Repositories declared in `settings.gradle(.kts)` are ignored<br>D. All repositories are treated equally without any preference,"<b>Correct Answer:</b> B<br><br>When the `FAIL_ON_PROJECT_REPOS` mode is enabled, declaring a repository in a project triggers a build error. This mode strictly enforces the use of repositories declared only in `settings.gradle(.kts)`, ensuring that all projects adhere to a centralized repository management strategy."
What is the default behavior of repository declarations in Gradle if no specific mode is set?<br><br>A. Repositories in `settings.gradle(.kts)` are always ignored<br>B. Repositories declared in a project override those in `settings.gradle(.kts)`<br>C. Repositories are declared only in the root project<br>D. All repositories must be declared in every subproject,<b>Correct Answer:</b> B<br><br>The default behavior in Gradle is that repositories declared in a project override those declared in `settings.gradle(.kts)`. This allows for flexibility in managing dependencies at the project level while still providing a centralized declaration option.
What is the primary purpose of centralizing repository declarations in Gradle?<br><br>A. To declare repositories for each subproject individually<br>B. To manage repositories in a single location for all projects<br>C. To eliminate the need for any repository declarations<br>D. To allow only local repositories to be used,"<b>Correct Answer:</b> B<br><br>The primary purpose of centralizing repository declarations in Gradle is to manage repositories in a single location for all projects. This approach simplifies the configuration process and ensures consistency across subprojects, allowing for easier maintenance and updates."
Which file is typically used to declare repositories centrally in Gradle?<br><br>A. build.gradle<br>B. settings.gradle<br>C. gradle.properties<br>D. settings.xml,"<b>Correct Answer:</b> B<br><br>The `settings.gradle` file is typically used to declare repositories centrally in Gradle. This allows for a unified configuration that applies to all subprojects, rather than requiring individual declarations in each project's build file."
What happens by default when repositories are declared in both `settings.gradle` and a project's `build.gradle`?<br><br>A. The project repositories are ignored<br>B. The settings repositories are ignored<br>C. The project repositories override the settings repositories<br>D. Both repositories are merged,"<b>Correct Answer:</b> C<br><br>By default, repositories declared in a project's `build.gradle` file will override those declared in `settings.gradle`. This behavior allows for project-specific configurations while still providing a central declaration option."
What is the purpose of the `repositoriesMode` setting in Gradle?<br><br>A. To define the types of repositories available<br>B. To control the precedence of repository declarations<br>C. To specify the location of local repositories<br>D. To enable or disable repository caching,"<b>Correct Answer:</b> B<br><br>The `repositoriesMode` setting in Gradle is used to control the precedence of repository declarations. It allows users to specify whether project repositories should override those declared in `settings.gradle`, thereby providing flexibility in managing dependencies across different projects."
What is the primary purpose of centralizing repository declarations in Gradle?<br><br>A. To simplify the management of dependencies across multiple subprojects<br>B. To increase the complexity of build scripts<br>C. To allow each subproject to declare its own repositories independently<br>D. To eliminate the need for any repository declarations,"<b>Correct Answer:</b> A<br><br>The primary purpose of centralizing repository declarations in Gradle is to simplify the management of dependencies across multiple subprojects. By declaring repositories in a central location, it reduces redundancy and ensures consistency in dependency resolution across the entire project."
Which mode in Gradle allows repositories declared in a project to override those declared in `settings.gradle`?<br><br>A. FAIL_ON_PROJECT_REPOS<br>B. PREFER_SETTINGS<br>C. PREFER_PROJECT<br>D. DEFAULT_MODE,<b>Correct Answer:</b> C<br><br>The `PREFER_PROJECT` mode allows repositories declared in a project to override those declared in `settings.gradle`. This mode is useful when different subprojects require specific repositories that may differ from the central declaration.
What happens when the `FAIL_ON_PROJECT_REPOS` mode is enabled?<br><br>A. Repositories declared in `settings.gradle` are ignored.<br>B. A build error is triggered if a project declares its own repository.<br>C. All repositories are merged into a single list.<br>D. Only repositories declared in the project are used.,"<b>Correct Answer:</b> B<br><br>When the `FAIL_ON_PROJECT_REPOS` mode is enabled, declaring a repository in a project triggers a build error. This mode strictly enforces the use of repositories declared only in `settings.gradle`, ensuring that all subprojects adhere to a consistent repository configuration."
What is the default behavior of repository declarations in Gradle?<br><br>A. Repositories in `settings.gradle` always take precedence.<br>B. Repositories declared in a project override those in `settings.gradle`.<br>C. Repositories are ignored unless explicitly declared.<br>D. All repositories must be declared in the root project only.,<b>Correct Answer:</b> B<br><br>The default behavior in Gradle is that repositories declared in a project's `build.gradle` file will override those declared in `settings.gradle`. This allows for flexibility in managing dependencies specific to each subproject while still providing a centralized declaration option.
