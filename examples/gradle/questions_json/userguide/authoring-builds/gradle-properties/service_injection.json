[
    {
        "question": "What is the primary purpose of service injection in Gradle?",
        "options": {
            "A": "To allow tasks to access and utilize various Gradle services",
            "B": "To automatically compile Gradle scripts",
            "C": "To manage dependencies in a Gradle project",
            "D": "To optimize the performance of Gradle builds"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of service injection in Gradle is to allow tasks to access and utilize various Gradle services. This enables developers to leverage built-in functionalities, such as file operations and parallel execution, enhancing the capabilities of their custom tasks and plugins."
    },
    {
        "question": "Which of the following is a method of obtaining a service in Gradle?",
        "options": {
            "A": "Using the `@Inject` annotation in a constructor or property method",
            "B": "Directly instantiating the service class",
            "C": "Calling a static method on the service class",
            "D": "Using a global variable to store the service instance"
        },
        "correct_answer": "A",
        "explanation": "In Gradle, services can be obtained by using the `@Inject` annotation in a constructor or property method. This allows Gradle to automatically provide the required service instances when the object is created, promoting better management and performance."
    },
    {
        "question": "What is the role of the `ObjectFactory` service in Gradle?",
        "options": {
            "A": "To create instances of custom Gradle types and manage their lifecycle",
            "B": "To execute external processes during the build",
            "C": "To provide access to project layout information",
            "D": "To manage file system operations"
        },
        "correct_answer": "A",
        "explanation": "The `ObjectFactory` service in Gradle is responsible for creating instances of custom Gradle types and managing their lifecycle. It allows developers to define nested objects and DSLs in their build logic, ensuring that these objects are properly managed by Gradle."
    },
    {
        "question": "Which service would you use to perform file system operations in Gradle?",
        "options": {
            "A": "ProviderFactory",
            "B": "FileSystemOperations",
            "C": "WorkerExecutor",
            "D": "ProjectLayout"
        },
        "correct_answer": "B",
        "explanation": "To perform file system operations in Gradle, you would use the `FileSystemOperations` service. This service provides methods for tasks such as copying, deleting, and creating directories, making it essential for interacting with the file system in custom tasks or plugins."
    },
    {
        "question": "What is the primary purpose of the `ObjectFactory` service in Gradle?",
        "options": {
            "A": "To create instances of custom Gradle types and manage their lifecycle",
            "B": "To execute external processes during the build",
            "C": "To provide access to project layout information",
            "D": "To manage file system operations such as copying and deleting files"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the `ObjectFactory` service in Gradle is to create instances of custom Gradle types, allowing developers to define nested objects and DSLs in their build logic. It ensures that these objects are properly managed by Gradle, particularly in terms of configuration avoidance and lazy evaluation, which can enhance build performance."
    },
    {
        "question": "How can an instance of `ObjectFactory` be obtained in a Gradle build script?",
        "options": {
            "A": "By calling `project.objects`",
            "B": "By using `project.layout`",
            "C": "By invoking `project.copy`",
            "D": "By accessing `project.exec`"
        },
        "correct_answer": "A",
        "explanation": "An instance of `ObjectFactory` can be obtained in a Gradle build script by calling `project.objects`. This allows developers to create various types of properties and collections that are managed by Gradle, facilitating the creation of custom types and improving build performance."
    },
    {
        "question": "What advantage does using `ObjectFactory` provide in terms of object management?",
        "options": {
            "A": "It allows for immediate evaluation of all properties",
            "B": "It ensures that objects are created eagerly to improve performance",
            "C": "It supports lazy evaluation and configuration avoidance",
            "D": "It simplifies the syntax for defining tasks"
        },
        "correct_answer": "C",
        "explanation": "Using `ObjectFactory` provides the advantage of supporting lazy evaluation and configuration avoidance. This means that the values of the created objects are only calculated when needed, which can significantly improve build performance by avoiding unnecessary computations during the configuration phase."
    },
    {
        "question": "Which of the following types of objects can be created using `ObjectFactory`?",
        "options": {
            "A": "Only simple data types like integers and strings",
            "B": "Only collections like lists and sets",
            "C": "Custom Gradle types, properties, and file-related objects",
            "D": "Only external process commands"
        },
        "correct_answer": "C",
        "explanation": "`ObjectFactory` can create a variety of objects, including custom Gradle types, properties (like `Property<T>`), collections (such as `ListProperty<T>`, `SetProperty<T>`, and `MapProperty<K, V>`), and file-related objects (like `RegularFileProperty` and `DirectoryProperty`). This versatility makes it a powerful tool for defining complex build logic."
    },
    {
        "question": "What is the primary purpose of the `ProjectLayout` service in Gradle?",
        "options": {
            "A": "To provide access to the layout of a Gradle project's directories and files",
            "B": "To manage the execution of tasks in parallel",
            "C": "To create custom Gradle types and properties",
            "D": "To execute external processes during the build"
        },
        "correct_answer": "A",
        "explanation": "The `ProjectLayout` service is designed to provide access to the layout of a Gradle project's directories and files. It allows users to query the project's structure, including source sets and build directories, which is essential for organizing and managing project resources effectively."
    },
    {
        "question": "How can you obtain an instance of the `ProjectLayout` service in a Gradle project?",
        "options": {
            "A": "By using the `project.layout` property",
            "B": "By calling the `ProjectLayout.getInstance()` method",
            "C": "By injecting it into the constructor of a task",
            "D": "By defining it in the build script directly"
        },
        "correct_answer": "A",
        "explanation": "An instance of the `ProjectLayout` service can be obtained using the `project.layout` property. This allows tasks and plugins to access the project's layout information easily, facilitating better management of project files and directories."
    },
    {
        "question": "In which context is the `ProjectLayout` service available for injection?",
        "options": {
            "A": "Only in settings plugins",
            "B": "Only in project plugins",
            "C": "In both project and settings plugins",
            "D": "Only in external scripts"
        },
        "correct_answer": "B",
        "explanation": "The `ProjectLayout` service is specifically available for injection in project plugins. This means that when developing plugins that operate within a Gradle project, developers can utilize this service to access and manage the project's directory structure."
    },
    {
        "question": "What type of information can be accessed using the `ProjectLayout` service?",
        "options": {
            "A": "Information about external processes",
            "B": "Details about the project's source sets and build directories",
            "C": "Configuration settings for parallel task execution",
            "D": "Data related to archive file operations"
        },
        "correct_answer": "B",
        "explanation": "The `ProjectLayout` service provides access to details about the project's source sets and build directories. This information is crucial for understanding how the project is organized and for managing the files and resources effectively during the build process."
    },
    {
        "question": "What is the primary purpose of the `BuildLayout` service in Gradle?",
        "options": {
            "A": "To provide access to the root and settings directory in a Settings plugin or script",
            "B": "To manage the execution of tasks in parallel",
            "C": "To create and manage custom Gradle types",
            "D": "To perform file system operations such as copying and deleting files"
        },
        "correct_answer": "A",
        "explanation": "The `BuildLayout` service is designed to provide access to the root and settings directory within a Settings plugin or script. It allows developers to work with standard build-wide file system locations, which is essential for organizing and managing project files effectively."
    },
    {
        "question": "How can a `BuildLayout` instance be obtained in a Gradle script?",
        "options": {
            "A": "By using the `project.layout` property",
            "B": "By using the `settings.layout` property",
            "C": "By using the `project.objects` property",
            "D": "By using the `project.exec` property"
        },
        "correct_answer": "B",
        "explanation": "A `BuildLayout` instance can be obtained from a `Settings` object using the `settings.layout` property. This allows access to the root and settings directories, which is crucial for managing the layout of a Gradle build."
    },
    {
        "question": "Which of the following statements is true regarding the `BuildLayout` service?",
        "options": {
            "A": "It is available for injection in project plugins.",
            "B": "It provides access to project-specific file locations.",
            "C": "It is analogous to the `ProjectLayout` service.",
            "D": "It is used for executing external processes."
        },
        "correct_answer": "C",
        "explanation": "The `BuildLayout` service is analogous to the `ProjectLayout` service, as both provide access to file system locations. However, `BuildLayout` specifically focuses on the root and settings directories within a Settings plugin or script, while `ProjectLayout` deals with the layout of a Gradle project's directories and files."
    },
    {
        "question": "What is the primary purpose of the `ProviderFactory` service in Gradle?",
        "options": {
            "A": "To create different types of providers for lazy value computation",
            "B": "To manage the execution of tasks in parallel",
            "C": "To define the layout of project directories and files",
            "D": "To perform file system operations such as copying and deleting files"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the `ProviderFactory` service is to create different types of providers that model values which may be computed lazily in build scripts. This allows for efficient resource management and performance optimization in Gradle builds."
    },
    {
        "question": "Which method of the `ProviderFactory` is used to create a provider with a value that is computed lazily based on a callable?",
        "options": {
            "A": "property(Class<T> type)",
            "B": "provider(Callable<T> value)",
            "C": "gradleProperty(Class<T> type)",
            "D": "provider(Provider<T> value)"
        },
        "correct_answer": "B",
        "explanation": "The method `provider(Callable<T> value)` is used to create a provider that computes its value lazily based on the provided callable. This allows for deferred execution, which can enhance build performance by avoiding unnecessary computations."
    },
    {
        "question": "How can you obtain an instance of `ProviderFactory` in a Gradle build script?",
        "options": {
            "A": "By using the `project.providers` property",
            "B": "By calling `new ProviderFactory()` directly",
            "C": "By injecting it into a task's constructor",
            "D": "By accessing the `settings.layout` property"
        },
        "correct_answer": "A",
        "explanation": "You can obtain an instance of `ProviderFactory` using the `project.providers` property in a Gradle build script. This allows you to create various types of providers for use in your build logic."
    },
    {
        "question": "What is a key benefit of using the `ProviderFactory` service in Gradle?",
        "options": {
            "A": "It allows for immediate computation of values",
            "B": "It enables lazy evaluation of values, improving build performance",
            "C": "It simplifies the creation of project layouts",
            "D": "It manages parallel execution of tasks"
        },
        "correct_answer": "B",
        "explanation": "A key benefit of using the `ProviderFactory` service is that it enables lazy evaluation of values. This means that values are only computed when needed, which can significantly improve build performance by avoiding unnecessary calculations."
    },
    {
        "question": "What is the primary purpose of the WorkerExecutor service in Gradle?",
        "options": {
            "A": "To perform parallel execution of tasks using worker processes",
            "B": "To manage project dependencies and configurations",
            "C": "To create and manage custom Gradle types",
            "D": "To handle file system operations such as copying and deleting files"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the WorkerExecutor service in Gradle is to perform parallel execution of tasks using worker processes. This allows tasks that are CPU-intensive or long-running to be executed concurrently, improving overall build performance and reliability."
    },
    {
        "question": "How does the WorkerExecutor improve build performance?",
        "options": {
            "A": "By isolating tasks in separate worker processes",
            "B": "By automatically optimizing the build script syntax",
            "C": "By caching build outputs for faster retrieval",
            "D": "By reducing the number of tasks that need to be executed"
        },
        "correct_answer": "A",
        "explanation": "The WorkerExecutor improves build performance by isolating tasks in separate worker processes. This isolation allows for better resource management and prevents long-running tasks from blocking the main Gradle process, thus enhancing the overall efficiency of the build."
    },
    {
        "question": "Which of the following statements is true about the WorkerExecutor service?",
        "options": {
            "A": "It can only execute tasks sequentially.",
            "B": "It allows tasks to run in parallel, improving performance.",
            "C": "It is used exclusively for file system operations.",
            "D": "It is not available for use in custom Gradle plugins."
        },
        "correct_answer": "B",
        "explanation": "The WorkerExecutor service allows tasks to run in parallel, which significantly improves performance, especially for tasks that are CPU-intensive or take a long time to complete. This parallel execution capability is a key feature of the WorkerExecutor."
    },
    {
        "question": "In which scenarios is the WorkerExecutor particularly useful?",
        "options": {
            "A": "For tasks that require user input during execution.",
            "B": "For tasks that perform CPU-intensive or long-running operations.",
            "C": "For tasks that only need to read from configuration files.",
            "D": "For tasks that are executed in a single-threaded environment."
        },
        "correct_answer": "B",
        "explanation": "The WorkerExecutor is particularly useful for tasks that perform CPU-intensive or long-running operations. By allowing these tasks to be executed in parallel, it helps to optimize build times and resource utilization, making the build process more efficient."
    },
    {
        "question": "What is the primary purpose of the `FileSystemOperations` service in Gradle?",
        "options": {
            "A": "To perform operations on the filesystem such as copying and deleting files",
            "B": "To manage project dependencies and configurations",
            "C": "To execute external processes and commands",
            "D": "To create and manage Gradle tasks"
        },
        "correct_answer": "A",
        "explanation": "The `FileSystemOperations` service is specifically designed to provide methods for performing various filesystem operations, including copying, deleting, and creating directories. This service is essential for tasks that need to interact with the filesystem as part of the build process."
    },
    {
        "question": "How can you obtain an instance of the `FileSystemOperations` service in a Gradle build script?",
        "options": {
            "A": "By using the `project.fileSystem` property",
            "B": "By using the `project.copy` property",
            "C": "By using the `project.exec` property",
            "D": "By using the `project.layout` property"
        },
        "correct_answer": "B",
        "explanation": "You can obtain an instance of the `FileSystemOperations` service using the `project.copy` property. This allows you to access the methods provided by the service to perform various file operations within your Gradle build script."
    },
    {
        "question": "Which of the following operations can be performed using the `FileSystemOperations` service?",
        "options": {
            "A": "Creating archives such as ZIP files",
            "B": "Executing external command-line processes",
            "C": "Copying files and directories",
            "D": "Registering custom tooling model builders"
        },
        "correct_answer": "C",
        "explanation": "The `FileSystemOperations` service provides methods specifically for performing file system operations, including copying files and directories. It does not handle tasks related to creating archives or executing external processes, which are managed by other services."
    },
    {
        "question": "In which scenarios would you typically use the `FileSystemOperations` service?",
        "options": {
            "A": "When you need to run external scripts as part of the build",
            "B": "When you need to manage project dependencies",
            "C": "When you need to manipulate files and directories during the build process",
            "D": "When you need to create custom Gradle types"
        },
        "correct_answer": "C",
        "explanation": "The `FileSystemOperations` service is used in scenarios where file manipulation is required during the build process, such as copying, deleting, or creating directories. It is not used for managing dependencies or running external scripts."
    },
    {
        "question": "What is the primary purpose of the `ArchiveOperations` service in Gradle?",
        "options": {
            "A": "To perform file system operations such as copying and deleting files",
            "B": "To create and manage archive files like ZIP and TAR",
            "C": "To execute external processes from within a build script",
            "D": "To provide access to project layout information"
        },
        "correct_answer": "B",
        "explanation": "The primary purpose of the `ArchiveOperations` service in Gradle is to create and manage archive files, such as ZIP and TAR files. This service provides methods specifically designed for working with archive formats, making it easier to bundle files together for distribution or storage."
    },
    {
        "question": "How can you obtain an instance of the `ArchiveOperations` service in a Gradle build script?",
        "options": {
            "A": "By using the `project.copy` property",
            "B": "By using the `project.zipTree` property",
            "C": "By using the `project.exec` property",
            "D": "By using the `project.layout` property"
        },
        "correct_answer": "B",
        "explanation": "You can obtain an instance of the `ArchiveOperations` service using the `project.zipTree` property in a Gradle build script. This allows you to access the methods provided by the `ArchiveOperations` service for creating and managing archive files."
    },
    {
        "question": "Which of the following tasks can be performed using the `ArchiveOperations` service?",
        "options": {
            "A": "Executing external commands",
            "B": "Creating ZIP or TAR files",
            "C": "Managing project dependencies",
            "D": "Performing parallel task execution"
        },
        "correct_answer": "B",
        "explanation": "The `ArchiveOperations` service is specifically designed for creating ZIP or TAR files, among other archive-related tasks. It provides the necessary methods to bundle files into these formats, which is essential for packaging and distribution in build processes."
    },
    {
        "question": "In which package is the `ArchiveOperations` service found?",
        "options": {
            "A": "org.gradle.api.file",
            "B": "org.gradle.process.internal",
            "C": "org.gradle.api.tasks.bundling",
            "D": "org.gradle.tooling.provider.model"
        },
        "correct_answer": "C",
        "explanation": "The `ArchiveOperations` service is part of the `org.gradle.api.tasks.bundling` package. This package contains classes and interfaces related to tasks that bundle files, including those for creating archive files like ZIP and TAR."
    },
    {
        "question": "What is the primary purpose of the `ExecOperations` service in Gradle?",
        "options": {
            "A": "To execute external processes from within a build script",
            "B": "To manage file system operations like copying and deleting files",
            "C": "To create and manage custom Gradle types",
            "D": "To provide access to project layout information"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the `ExecOperations` service is to execute external processes or commands from within a Gradle build script. This allows developers to run command-line tools or scripts as part of the build process, integrating external functionality seamlessly."
    },
    {
        "question": "How can you obtain an instance of the `ExecOperations` service in a Gradle build script?",
        "options": {
            "A": "By using the `project.exec` property",
            "B": "By using the `project.objects` property",
            "C": "By using the `project.layout` property",
            "D": "By using the `project.copy` property"
        },
        "correct_answer": "A",
        "explanation": "An instance of the `ExecOperations` service can be obtained using the `project.exec` property in a Gradle build script. This property provides access to the methods for executing external processes."
    },
    {
        "question": "Which of the following best describes a scenario where `ExecOperations` would be useful?",
        "options": {
            "A": "When you need to create a new custom Gradle type",
            "B": "When you want to perform file system operations like copying files",
            "C": "When you need to run a command-line tool as part of the build process",
            "D": "When you want to access project layout information"
        },
        "correct_answer": "C",
        "explanation": "`ExecOperations` is particularly useful when you need to run command-line tools or scripts as part of the build process. This allows for the integration of external processes that can enhance the functionality of the build."
    },
    {
        "question": "What is a key benefit of using `ExecOperations` in a Gradle build?",
        "options": {
            "A": "It allows for lazy evaluation of properties",
            "B": "It improves build performance by executing tasks in parallel",
            "C": "It provides a way to manage file system operations",
            "D": "It isolates external process execution from the main Gradle process"
        },
        "correct_answer": "D",
        "explanation": "A key benefit of using `ExecOperations` is that it isolates the execution of external processes from the main Gradle process. This isolation helps improve reliability and performance, especially for long-running or resource-intensive tasks."
    },
    {
        "question": "What is the primary purpose of the ToolingModelBuilderRegistry service in Gradle?",
        "options": {
            "A": "To register custom tooling model builders for IDE integration",
            "B": "To manage the execution of tasks in parallel",
            "C": "To create and manage project properties",
            "D": "To perform file system operations"
        },
        "correct_answer": "A",
        "explanation": "The ToolingModelBuilderRegistry service is primarily used to register custom tooling model builders, which enhance IDE integration for Gradle projects. This allows IDEs to better understand the project's structure, dependencies, and other relevant aspects, improving the development experience."
    },
    {
        "question": "Which package does the ToolingModelBuilderRegistry service belong to?",
        "options": {
            "A": "org.gradle.api.file",
            "B": "org.gradle.tooling.provider.model",
            "C": "org.gradle.process.internal",
            "D": "org.gradle.api.provider"
        },
        "correct_answer": "B",
        "explanation": "The ToolingModelBuilderRegistry service is part of the org.gradle.tooling.provider.model package. This package contains interfaces and classes that facilitate the integration of Gradle with IDEs, allowing for richer project modeling and interaction."
    },
    {
        "question": "How does the ToolingModelBuilderRegistry service benefit IDEs working with Gradle projects?",
        "options": {
            "A": "By providing a way to execute tasks in parallel",
            "B": "By allowing IDEs to understand and work with the project's structure and dependencies",
            "C": "By managing file system operations during the build process",
            "D": "By creating custom Gradle types for build logic"
        },
        "correct_answer": "B",
        "explanation": "The ToolingModelBuilderRegistry service benefits IDEs by allowing them to understand and work with the project's structure, dependencies, and other aspects. This integration enhances the development experience by providing better support for project navigation, code completion, and other IDE features."
    },
    {
        "question": "What is required to use the ToolingModelBuilderRegistry service in a custom Gradle plugin?",
        "options": {
            "A": "It must be injected into the plugin's constructor",
            "B": "It can only be accessed through static methods",
            "C": "It requires a specific Gradle version to be compatible",
            "D": "It must be registered in the build.gradle file"
        },
        "correct_answer": "A",
        "explanation": "To use the ToolingModelBuilderRegistry service in a custom Gradle plugin, it must be injected into the plugin's constructor using the @Inject annotation. This allows the plugin to access the service and register custom tooling model builders effectively."
    },
    {
        "question": "What is constructor injection in the context of Gradle services?",
        "options": {
            "A": "A method of providing services to a class through its constructor parameters",
            "B": "A way to inject services into a class using public methods",
            "C": "A technique for creating instances of classes without dependencies",
            "D": "A process that allows Gradle to automatically manage service lifecycles"
        },
        "correct_answer": "A",
        "explanation": "Constructor injection is a method of providing services to a class by passing them as parameters to the class's constructor. This approach allows Gradle to determine the required services based on the declared types of the constructor parameters, facilitating dependency management and ensuring that the necessary services are available when the class is instantiated."
    },
    {
        "question": "Which annotation is used to indicate that a constructor parameter should be injected with a service?",
        "options": {
            "A": "@ServiceInject",
            "B": "@Inject",
            "C": "@Autowired",
            "D": "@ConstructorInject"
        },
        "correct_answer": "B",
        "explanation": "The `@Inject` annotation is used to indicate that a constructor parameter should be injected with a service. This annotation tells Gradle to provide the appropriate service instance when creating an object of the class, allowing for effective dependency injection."
    },
    {
        "question": "What is a key benefit of using constructor injection for services in Gradle?",
        "options": {
            "A": "It allows for services to be injected at runtime only.",
            "B": "It ensures that all dependencies are explicitly defined and provided at the time of object creation.",
            "C": "It simplifies the process of creating service instances without any parameters.",
            "D": "It allows for services to be shared across multiple instances of a class."
        },
        "correct_answer": "B",
        "explanation": "A key benefit of using constructor injection is that it ensures all dependencies are explicitly defined and provided at the time of object creation. This makes the dependencies clear and helps prevent issues related to uninitialized services, leading to more reliable and maintainable code."
    },
    {
        "question": "In which scenario would constructor injection be preferred over property injection?",
        "options": {
            "A": "When backward compatibility is a concern",
            "B": "When the class requires multiple services to function correctly",
            "C": "When services need to be injected lazily",
            "D": "When the class has a complex initialization process"
        },
        "correct_answer": "B",
        "explanation": "Constructor injection is preferred when a class requires multiple services to function correctly, as it allows all necessary dependencies to be provided at once during object creation. This approach ensures that the object is fully initialized with all required services, reducing the risk of runtime errors due to missing dependencies."
    },
    {
        "question": "What is the primary purpose of property injection in Gradle?",
        "options": {
            "A": "To allow services to be injected into a class without modifying its constructor",
            "B": "To create new instances of Gradle tasks",
            "C": "To manage the lifecycle of Gradle projects",
            "D": "To enforce strict type checking in Gradle scripts"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of property injection in Gradle is to allow services to be injected into a class without modifying its constructor. This is particularly useful for maintaining backward compatibility or when the constructor cannot be changed. Property injection defers the creation of the service until the property getter method is called, which can also improve performance."
    },
    {
        "question": "Which annotation is used to indicate that a property should be injected in Gradle?",
        "options": {
            "A": "@Autowired",
            "B": "@Inject",
            "C": "@Service",
            "D": "@Component"
        },
        "correct_answer": "B",
        "explanation": "The `@Inject` annotation is used in Gradle to indicate that a property should be injected. This annotation tells Gradle to provide the necessary service when the property getter method is called, allowing for flexible service management without altering the class constructor."
    },
    {
        "question": "What is a key benefit of using property injection over constructor injection in Gradle?",
        "options": {
            "A": "It allows for multiple services to be injected at once.",
            "B": "It can improve performance by deferring service creation.",
            "C": "It requires less code to implement.",
            "D": "It is the only method available for service injection."
        },
        "correct_answer": "B",
        "explanation": "A key benefit of using property injection over constructor injection in Gradle is that it can improve performance by deferring the creation of the service until the property getter method is called. This means that the service is only created when it is actually needed, which can lead to more efficient resource usage."
    },
    {
        "question": "Which of the following statements about property injection is true?",
        "options": {
            "A": "The property getter method must be private.",
            "B": "The property name is significant for service identification.",
            "C": "The method can have a dummy body if it is not abstract.",
            "D": "Only one service can be injected per class."
        },
        "correct_answer": "C",
        "explanation": "In property injection, the property getter method can have a dummy body if it is not abstract. This allows Gradle to defer the creation of the service until the method is called. The method must be public or protected, and the name of the property is not significant for service identification."
    }
]