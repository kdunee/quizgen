[
    {
        "question": "What is the primary purpose of capability management in dependency management?",
        "options": {
            "A": "To allow multiple versions of the same library to coexist",
            "B": "To prevent conflicts between components providing the same capability",
            "C": "To automatically update all dependencies to their latest versions",
            "D": "To simplify the dependency graph by removing unused dependencies"
        },
        "correct_answer": "B",
        "explanation": "The primary purpose of capability management in dependency management is to prevent conflicts between components that provide the same capability. This ensures that only one implementation of a capability is present in the dependency graph, which helps maintain consistency and avoid runtime errors."
    },
    {
        "question": "What does a capability in dependency management consist of?",
        "options": {
            "A": "A unique identifier and a description",
            "B": "A group, module, and version triplet",
            "C": "A list of all dependencies and their versions",
            "D": "A set of rules for resolving conflicts"
        },
        "correct_answer": "B",
        "explanation": "A capability in dependency management is defined by a group, module, and version triplet. This triplet uniquely identifies a component and its capabilities, allowing the dependency management system to track and resolve conflicts effectively."
    },
    {
        "question": "What happens when Gradle detects two components providing the same capability?",
        "options": {
            "A": "It automatically selects the latest version of the capability",
            "B": "It fails the build and indicates the conflicting modules",
            "C": "It merges the two components into one",
            "D": "It ignores the conflict and continues the build process"
        },
        "correct_answer": "B",
        "explanation": "When Gradle detects two components providing the same capability, it fails the build and indicates which modules are in conflict. This mechanism is crucial for ensuring that only one implementation of a capability is present in the dependency graph, preventing potential issues during runtime."
    },
    {
        "question": "How can developers resolve conflicts between mutually exclusive dependencies in Gradle?",
        "options": {
            "A": "By removing all dependencies from the project",
            "B": "By selecting the highest version of the conflicting dependencies",
            "C": "By explicitly declaring which dependency to use",
            "D": "By allowing Gradle to choose any available dependency"
        },
        "correct_answer": "C",
        "explanation": "Developers can resolve conflicts between mutually exclusive dependencies in Gradle by explicitly declaring which dependency to use. This approach allows for precise control over which implementation is selected, ensuring that the correct version is used based on the project's requirements."
    },
    {
        "question": "What does the term 'mutually exclusive dependencies' refer to in a dependency graph?",
        "options": {
            "A": "Dependencies that can coexist without conflict.",
            "B": "Dependencies that provide the same capability and cannot be used together.",
            "C": "Dependencies that are required for the same functionality.",
            "D": "Dependencies that are automatically resolved by the build tool."
        },
        "correct_answer": "B",
        "explanation": "Mutually exclusive dependencies refer to dependencies that provide the same capability and cannot be used together in a single dependency graph. This situation often arises when different versions or implementations of a library are included, leading to conflicts that must be resolved."
    },
    {
        "question": "How does Gradle handle conflicts arising from mutually exclusive dependencies?",
        "options": {
            "A": "It automatically merges the dependencies into one.",
            "B": "It fails the build and indicates the conflicting modules.",
            "C": "It ignores the conflicts and continues the build process.",
            "D": "It selects the dependency with the lowest version number."
        },
        "correct_answer": "B",
        "explanation": "Gradle handles conflicts from mutually exclusive dependencies by failing the build and indicating which modules are in conflict. This approach helps developers identify and resolve issues in the dependency graph rather than allowing potentially problematic dependencies to coexist."
    },
    {
        "question": "What is the purpose of declaring component capabilities in Gradle?",
        "options": {
            "A": "To allow multiple versions of the same dependency to be used simultaneously.",
            "B": "To help Gradle discover conflicts early during the build process.",
            "C": "To automatically resolve all dependency conflicts without user intervention.",
            "D": "To ensure that all dependencies are compatible with each other."
        },
        "correct_answer": "B",
        "explanation": "Declaring component capabilities in Gradle serves to help discover conflicts early during the build process. By explicitly defining capabilities, developers can identify potential issues with mutually exclusive dependencies before they lead to runtime errors."
    },
    {
        "question": "What happens if no resolution is provided for conflicts on a given capability in Gradle?",
        "options": {
            "A": "The build will succeed with a warning.",
            "B": "The build will fail due to unresolved conflicts.",
            "C": "Gradle will automatically select a default dependency.",
            "D": "The conflicting dependencies will be ignored."
        },
        "correct_answer": "B",
        "explanation": "If no resolution is provided for conflicts on a given capability in Gradle, the build will fail. This failure occurs because the module chosen for resolution was not part of the graph, indicating that the developer must address the conflict to proceed."
    },
    {
        "question": "What is the primary purpose of capabilities in a dependency graph?",
        "options": {
            "A": "To allow multiple components to provide the same functionality",
            "B": "To prevent conflicts between components providing the same capability",
            "C": "To automatically resolve all dependency issues",
            "D": "To enhance the performance of the build process"
        },
        "correct_answer": "B",
        "explanation": "The primary purpose of capabilities in a dependency graph is to prevent conflicts between components that provide the same capability. Gradle enforces that only one component can provide a specific capability at a time, ensuring that the build process does not encounter issues due to multiple implementations of the same API."
    },
    {
        "question": "How is a capability defined in Gradle?",
        "options": {
            "A": "By a unique identifier that includes the component's name",
            "B": "By a triplet consisting of group, module, and version",
            "C": "By the number of dependencies a component has",
            "D": "By the type of functionality it provides"
        },
        "correct_answer": "B",
        "explanation": "In Gradle, a capability is defined by a triplet consisting of the group, module, and version (GAV coordinates). This definition allows Gradle to identify and manage capabilities effectively, ensuring that conflicts are detected and handled appropriately."
    },
    {
        "question": "What happens if Gradle detects two components providing the same capability?",
        "options": {
            "A": "Gradle automatically resolves the conflict by choosing one component",
            "B": "Gradle fails the build and indicates the conflicting modules",
            "C": "Gradle ignores the conflict and continues the build process",
            "D": "Gradle merges the two components into a single implementation"
        },
        "correct_answer": "B",
        "explanation": "If Gradle detects two components providing the same capability, it fails the build and indicates which modules are in conflict. This mechanism is crucial for maintaining the integrity of the dependency graph and ensuring that only one implementation of a capability is present."
    },
    {
        "question": "Why is it important to declare component capabilities in Gradle?",
        "options": {
            "A": "To ensure all components are compatible with each other",
            "B": "To allow Gradle to automatically fix dependency issues",
            "C": "To help discover conflicts early during the build process",
            "D": "To reduce the overall size of the build artifacts"
        },
        "correct_answer": "C",
        "explanation": "Declaring component capabilities in Gradle is important because it helps discover conflicts early during the build process. By explicitly defining capabilities, developers can identify potential issues before runtime, allowing for quicker resolution and a smoother build experience."
    },
    {
        "question": "What is the primary purpose of conflict resolution in dependency management?",
        "options": {
            "A": "To ensure that only one implementation of a capability is present in the dependency graph",
            "B": "To automatically update all dependencies to their latest versions",
            "C": "To allow multiple versions of the same library to coexist without issues",
            "D": "To simplify the dependency graph by removing unused dependencies"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of conflict resolution in dependency management is to ensure that only one implementation of a capability is present in the dependency graph. This prevents issues that arise from having multiple conflicting libraries that provide the same functionality, which can lead to runtime errors and unpredictable behavior."
    },
    {
        "question": "What happens when Gradle detects two components providing the same capability?",
        "options": {
            "A": "Gradle automatically selects the highest version of the capability",
            "B": "Gradle fails the build and indicates the conflicting modules",
            "C": "Gradle merges the two components into one",
            "D": "Gradle ignores the conflict and continues the build"
        },
        "correct_answer": "B",
        "explanation": "When Gradle detects two components providing the same capability, it fails the build and indicates the conflicting modules. This behavior is designed to alert developers to potential issues in their dependency graph, allowing them to resolve conflicts before runtime."
    },
    {
        "question": "In the context of Gradle, what is a capability defined by?",
        "options": {
            "A": "A unique identifier for each dependency",
            "B": "A triplet consisting of group, module, and version",
            "C": "A set of rules for dependency resolution",
            "D": "A list of all dependencies in a project"
        },
        "correct_answer": "B",
        "explanation": "In Gradle, a capability is defined by a triplet consisting of group, module, and version. This triplet uniquely identifies a capability and allows Gradle to manage dependencies effectively, ensuring that only one implementation of a capability is present in the dependency graph."
    },
    {
        "question": "What is the recommended approach when dealing with multiple logger implementations in Gradle?",
        "options": {
            "A": "Select the highest version of any logger implementation",
            "B": "Always choose the logging framework that is most popular",
            "C": "Explicitly select a preferred logging framework to resolve conflicts",
            "D": "Allow Gradle to automatically choose any available logger"
        },
        "correct_answer": "C",
        "explanation": "The recommended approach when dealing with multiple logger implementations in Gradle is to explicitly select a preferred logging framework to resolve conflicts. This ensures that the desired logger is used consistently across the project, rather than relying on automatic selection, which may not yield the best results."
    },
    {
        "question": "What does versioning in the context of capabilities refer to?",
        "options": {
            "A": "The process of updating software to the latest version",
            "B": "The assignment of a unique identifier to each component based on its group, module, and version",
            "C": "The ability to run multiple versions of a component simultaneously",
            "D": "The method of removing outdated components from a project"
        },
        "correct_answer": "B",
        "explanation": "Versioning in the context of capabilities refers to the assignment of a unique identifier to each component based on its group, module, and version. This ensures that each capability is distinct and helps manage conflicts that may arise when multiple components provide the same capability."
    },
    {
        "question": "Why is it important to manage versioning in dependency graphs?",
        "options": {
            "A": "To ensure that all components are the same version",
            "B": "To prevent conflicts between components that provide the same capability",
            "C": "To allow for unlimited versions of a component to coexist",
            "D": "To automatically update all components to the latest version"
        },
        "correct_answer": "B",
        "explanation": "Managing versioning in dependency graphs is important to prevent conflicts between components that provide the same capability. By ensuring that only one version of a capability exists in the graph, it helps maintain stability and predictability in the build process."
    },
    {
        "question": "What happens if two components with the same capability are found in a dependency graph?",
        "options": {
            "A": "Gradle will automatically choose the latest version",
            "B": "The build will fail with an error indicating the conflict",
            "C": "Gradle will ignore one of the components",
            "D": "The components will be merged into a single version"
        },
        "correct_answer": "B",
        "explanation": "If two components with the same capability are found in a dependency graph, Gradle will fail the build with an error indicating the conflict. This mechanism is in place to ensure that developers are aware of potential issues that could arise from having multiple implementations of the same capability."
    },
    {
        "question": "What does the term 'component relocation' refer to in dependency management?",
        "options": {
            "A": "Moving a component to a different version without changing its functionality",
            "B": "Changing the coordinates of a component while maintaining its capabilities",
            "C": "Removing a component from the dependency graph entirely",
            "D": "Duplicating a component to allow multiple versions to coexist"
        },
        "correct_answer": "B",
        "explanation": "Component relocation refers to changing the coordinates of a component while maintaining its capabilities. This is often necessary when a library is updated or restructured, and it is important to ensure that the new coordinates do not conflict with existing dependencies that provide the same functionality."
    },
    {
        "question": "Why is it illegal to have both old and relocated versions of a component in the same dependency graph?",
        "options": {
            "A": "Because they may have different functionalities",
            "B": "Because they provide the same capability and can cause conflicts",
            "C": "Because Gradle does not support multiple versions of any component",
            "D": "Because it leads to performance issues during runtime"
        },
        "correct_answer": "B",
        "explanation": "It is illegal to have both old and relocated versions of a component in the same dependency graph because they provide the same capability, which can lead to conflicts. Gradle enforces this rule to prevent ambiguity in which version of the component should be used, ensuring a clear and consistent dependency resolution."
    },
    {
        "question": "What is the primary purpose of declaring component capabilities in Gradle?",
        "options": {
            "A": "To allow multiple versions of a component to be used simultaneously",
            "B": "To help identify and resolve conflicts in the dependency graph",
            "C": "To enhance the performance of the build process",
            "D": "To automatically update components to their latest versions"
        },
        "correct_answer": "B",
        "explanation": "The primary purpose of declaring component capabilities in Gradle is to help identify and resolve conflicts in the dependency graph. By explicitly stating the capabilities of components, Gradle can detect when multiple components provide the same functionality and enforce rules to manage these conflicts effectively."
    },
    {
        "question": "What happens if no resolution is provided for conflicts on a given capability in Gradle?",
        "options": {
            "A": "The build will continue without any issues",
            "B": "The build will fail due to unresolved conflicts",
            "C": "Gradle will automatically select the highest version available",
            "D": "Gradle will ignore the conflicts and proceed with the build"
        },
        "correct_answer": "B",
        "explanation": "If no resolution is provided for conflicts on a given capability in Gradle, the build will fail. This is because Gradle requires a clear resolution to ensure that only one version of a capability is present in the dependency graph, preventing potential runtime issues caused by conflicting components."
    }
]