[
    {
        "question": "What is the primary purpose of the Java Library Distribution Plugin?",
        "options": {
            "A": "To build a distribution ZIP for a Java library",
            "B": "To compile Java source code into bytecode",
            "C": "To manage dependencies for Java applications",
            "D": "To create documentation for Java libraries"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the Java Library Distribution Plugin is to build a distribution ZIP for a Java library. This distribution includes the JAR file for the library along with its runtime dependencies, allowing for easy sharing and deployment of the library."
    },
    {
        "question": "Which property must be set to define the name of the distribution in the Java Library Distribution Plugin?",
        "options": {
            "A": "distributionName",
            "B": "baseName",
            "C": "libraryName",
            "D": "archiveName"
        },
        "correct_answer": "B",
        "explanation": "To define the name of the distribution in the Java Library Distribution Plugin, the `baseName` property must be set. This property determines the base name of the distribution ZIP file that will be created."
    },
    {
        "question": "What command is used to create a ZIP file containing the distribution of a Java library?",
        "options": {
            "A": "gradle buildZip",
            "B": "gradle createZip",
            "C": "gradle distZip",
            "D": "gradle packageZip"
        },
        "correct_answer": "C",
        "explanation": "The command used to create a ZIP file containing the distribution of a Java library is `gradle distZip`. This command triggers the process to package the library and its runtime dependencies into a ZIP archive."
    },
    {
        "question": "Where should static files be placed to include them in the distribution created by the Java Library Distribution Plugin?",
        "options": {
            "A": "src/main/resources",
            "B": "src/dist",
            "C": "src/main/java",
            "D": "src/test"
        },
        "correct_answer": "B",
        "explanation": "To include static files in the distribution created by the Java Library Distribution Plugin, they should be placed in the `src/dist` directory. This directory is specifically designated for files that will be included in the final distribution ZIP."
    },
    {
        "question": "What is the primary purpose of a build script in the context of software development?",
        "options": {
            "A": "To define the user interface of an application",
            "B": "To automate the process of building and packaging software",
            "C": "To manage database connections",
            "D": "To write documentation for the code"
        },
        "correct_answer": "B",
        "explanation": "The primary purpose of a build script is to automate the process of building and packaging software. This includes compiling source code, managing dependencies, and creating distributable formats such as ZIP files. Build scripts streamline the development process by reducing manual tasks and ensuring consistency."
    },
    {
        "question": "Which of the following is a common task performed by a build script?",
        "options": {
            "A": "Creating user accounts",
            "B": "Compiling source code into executable files",
            "C": "Designing the application layout",
            "D": "Testing user interface responsiveness"
        },
        "correct_answer": "B",
        "explanation": "A common task performed by a build script is compiling source code into executable files. This process transforms human-readable code into machine-readable code, which is essential for running the application. Build scripts can also handle other tasks such as packaging and dependency management."
    },
    {
        "question": "In a build script, what is the significance of defining properties like `baseName`?",
        "options": {
            "A": "It determines the programming language used in the project",
            "B": "It specifies the name of the output distribution package",
            "C": "It sets the version control system for the project",
            "D": "It configures the user permissions for the project"
        },
        "correct_answer": "B",
        "explanation": "Defining properties like `baseName` in a build script is significant because it specifies the name of the output distribution package. This allows developers to customize how their software is packaged and distributed, ensuring that the final product is easily identifiable and organized."
    },
    {
        "question": "What does the `distZip` task in a build script typically do?",
        "options": {
            "A": "It runs unit tests on the codebase",
            "B": "It creates a ZIP archive of the project distribution",
            "C": "It deploys the application to a server",
            "D": "It generates documentation for the code"
        },
        "correct_answer": "B",
        "explanation": "The `distZip` task in a build script typically creates a ZIP archive of the project distribution. This task packages the compiled code and its runtime dependencies into a single file, making it easier to distribute and deploy the software. It is an essential part of the build process for creating deliverable software."
    },
    {
        "question": "What is the primary purpose of the Java library distribution plugin?",
        "options": {
            "A": "To build a distribution ZIP for a Java library",
            "B": "To compile Java source code into bytecode",
            "C": "To manage project dependencies",
            "D": "To run unit tests for Java applications"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the Java library distribution plugin is to build a distribution ZIP for a Java library. This distribution includes the JAR file for the library along with its runtime dependencies, allowing for easy packaging and distribution of the library."
    },
    {
        "question": "Which command is used to create a ZIP file containing the distribution of a Java library?",
        "options": {
            "A": "gradle build",
            "B": "gradle distZip",
            "C": "gradle package",
            "D": "gradle zip"
        },
        "correct_answer": "B",
        "explanation": "The command used to create a ZIP file containing the distribution of a Java library is 'gradle distZip'. This command triggers the process that packages the library and its dependencies into a ZIP archive."
    },
    {
        "question": "Where should static files be placed to include them in the distribution ZIP?",
        "options": {
            "A": "In the src/main/java directory",
            "B": "In the src/dist directory",
            "C": "In the build directory",
            "D": "In the src/main/resources directory"
        },
        "correct_answer": "B",
        "explanation": "To include static files in the distribution ZIP, they should be placed in the 'src/dist' directory. This directory is specifically designated for files that need to be included in the final distribution package."
    },
    {
        "question": "What does the 'distZip' task depend on in the Java library distribution plugin?",
        "options": {
            "A": "compileJava",
            "B": "jar",
            "C": "test",
            "D": "assemble"
        },
        "correct_answer": "B",
        "explanation": "The 'distZip' task in the Java library distribution plugin depends on the 'jar' task. This means that the JAR file must be created before the distribution ZIP can be generated, ensuring that the library is packaged correctly."
    },
    {
        "question": "What are runtime dependencies in the context of a Java library distribution?",
        "options": {
            "A": "Files required for compiling the library",
            "B": "Libraries needed for the library to function at runtime",
            "C": "Documentation files for the library",
            "D": "Configuration files for the build process"
        },
        "correct_answer": "B",
        "explanation": "Runtime dependencies are libraries or components that a Java library requires to function correctly when it is executed. These dependencies are packaged with the library in the distribution to ensure that all necessary components are available during runtime, allowing the library to operate as intended."
    },
    {
        "question": "How does the Java library distribution plugin handle runtime dependencies?",
        "options": {
            "A": "It ignores them during the build process.",
            "B": "It packages them into the distribution ZIP file.",
            "C": "It compiles them into the library's source code.",
            "D": "It requires them to be installed separately by the user."
        },
        "correct_answer": "B",
        "explanation": "The Java library distribution plugin packages runtime dependencies into the distribution ZIP file. This ensures that when the library is distributed, all necessary components are included, allowing users to run the library without needing to manually manage its dependencies."
    },
    {
        "question": "Where should static files be placed to be included in the Java library distribution?",
        "options": {
            "A": "In the `src/main/java` directory",
            "B": "In the `src/dist` directory",
            "C": "In the `build` directory",
            "D": "In the `src/test` directory"
        },
        "correct_answer": "B",
        "explanation": "Static files that need to be included in the Java library distribution should be placed in the `src/dist` directory. This directory is specifically designated for files that will be packaged into the distribution, ensuring they are available alongside the library and its runtime dependencies."
    },
    {
        "question": "What is the primary purpose of Gradle tasks in a build process?",
        "options": {
            "A": "To define the structure of the project",
            "B": "To automate specific actions during the build process",
            "C": "To manage dependencies between libraries",
            "D": "To compile source code into executable files"
        },
        "correct_answer": "B",
        "explanation": "The primary purpose of Gradle tasks is to automate specific actions during the build process. Tasks can perform a variety of functions, such as compiling code, packaging files, and running tests, allowing developers to streamline their workflow and ensure consistency in the build process."
    },
    {
        "question": "Which command is used to create a distribution ZIP file in Gradle?",
        "options": {
            "A": "gradle build",
            "B": "gradle distZip",
            "C": "gradle package",
            "D": "gradle zip"
        },
        "correct_answer": "B",
        "explanation": "The command used to create a distribution ZIP file in Gradle is 'gradle distZip'. This task is specifically designed to package the library and its runtime dependencies into a ZIP archive, making it easy to distribute."
    },
    {
        "question": "What happens to files stored in the 'src/main/dist' directory when using the Java library distribution plugin?",
        "options": {
            "A": "They are ignored during the build process.",
            "B": "They are included in the root of the distribution archive.",
            "C": "They are compiled into the final executable.",
            "D": "They are automatically deleted after the build."
        },
        "correct_answer": "B",
        "explanation": "Files stored in the 'src/main/dist' directory are included in the root of the distribution archive when using the Java library distribution plugin. This allows developers to package additional resources alongside their library for distribution."
    },
    {
        "question": "What is a common feature of Gradle tasks?",
        "options": {
            "A": "They can only be executed in a specific order.",
            "B": "They can depend on other tasks to ensure proper execution.",
            "C": "They are limited to compiling Java code only.",
            "D": "They must be defined in a separate configuration file."
        },
        "correct_answer": "B",
        "explanation": "A common feature of Gradle tasks is that they can depend on other tasks to ensure proper execution. This allows for complex build processes where certain tasks must be completed before others can run, facilitating a structured and efficient build workflow."
    }
]