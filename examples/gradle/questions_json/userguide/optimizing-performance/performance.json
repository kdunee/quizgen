[
    {
        "question": "What is the primary goal of optimizing build performance in Gradle?",
        "options": {
            "A": "To reduce the time taken for builds to complete",
            "B": "To increase the number of tasks in a build",
            "C": "To ensure all tasks run sequentially",
            "D": "To eliminate the need for version updates"
        },
        "correct_answer": "A",
        "explanation": "The primary goal of optimizing build performance in Gradle is to reduce the time taken for builds to complete. Faster builds enhance productivity by minimizing disruptions in the development flow and allowing for quicker iterations and testing."
    },
    {
        "question": "Which of the following techniques can help improve Gradle build performance?",
        "options": {
            "A": "Running all tasks in a single thread",
            "B": "Enabling parallel execution of tasks",
            "C": "Using outdated versions of plugins",
            "D": "Increasing the number of dependencies"
        },
        "correct_answer": "B",
        "explanation": "Enabling parallel execution of tasks can significantly improve Gradle build performance, especially in projects with multiple independent subprojects. This allows Gradle to run tasks concurrently, reducing overall build time."
    },
    {
        "question": "What is the purpose of the Gradle Daemon in build performance optimization?",
        "options": {
            "A": "To run builds in a separate process",
            "B": "To cache project information across builds",
            "C": "To disable all plugins",
            "D": "To increase the number of tasks executed"
        },
        "correct_answer": "B",
        "explanation": "The Gradle Daemon is designed to cache project information across builds, which helps reduce build times by avoiding the overhead of JVM startup for each build. It runs in the background and optimizes the build process by maintaining state."
    },
    {
        "question": "How can enabling the configuration cache benefit Gradle builds?",
        "options": {
            "A": "By skipping the execution of all tasks",
            "B": "By caching the result of the configuration phase",
            "C": "By increasing the number of dependencies",
            "D": "By running tasks in a single thread"
        },
        "correct_answer": "B",
        "explanation": "Enabling the configuration cache allows Gradle to cache the result of the configuration phase, which means that if the build configuration inputs remain unchanged, Gradle can skip the configuration phase entirely, leading to faster build times."
    },
    {
        "question": "What is a recommended practice to avoid performance degradation during Gradle builds?",
        "options": {
            "A": "Apply all plugins to every subproject",
            "B": "Minimize the number of declared repositories",
            "C": "Use dynamic versions for all dependencies",
            "D": "Disable the Gradle Daemon"
        },
        "correct_answer": "B",
        "explanation": "Minimizing the number of declared repositories helps avoid performance degradation during Gradle builds. Fewer repositories reduce the time spent searching for dependencies, which can significantly impact build performance."
    },
    {
        "question": "What is the primary goal of Continuous Integration (CI) in software development?",
        "options": {
            "A": "To ensure that code changes are automatically tested and integrated into the main branch frequently",
            "B": "To manually review all code changes before they are merged",
            "C": "To limit the number of code changes made to the main branch",
            "D": "To deploy code changes to production without testing"
        },
        "correct_answer": "A",
        "explanation": "The primary goal of Continuous Integration (CI) is to ensure that code changes are automatically tested and integrated into the main branch frequently. This practice helps to identify and address issues early in the development process, improving overall software quality and reducing integration problems."
    },
    {
        "question": "How does Continuous Integration contribute to build performance?",
        "options": {
            "A": "By running all tests in parallel to reduce overall testing time",
            "B": "By requiring developers to work on the same feature branch for extended periods",
            "C": "By eliminating the need for automated testing altogether",
            "D": "By increasing the number of manual code reviews before integration"
        },
        "correct_answer": "A",
        "explanation": "Continuous Integration contributes to build performance by running tests in parallel, which can significantly reduce overall testing time. This allows for faster feedback on code changes and helps maintain a smooth development workflow."
    },
    {
        "question": "What is a common practice in Continuous Integration to ensure code quality?",
        "options": {
            "A": "Integrating code changes only at the end of a development cycle",
            "B": "Running automated tests on every code change before merging",
            "C": "Allowing developers to skip testing if they feel confident in their changes",
            "D": "Only testing code changes that are larger than a certain size"
        },
        "correct_answer": "B",
        "explanation": "A common practice in Continuous Integration is to run automated tests on every code change before merging. This ensures that any issues are identified and addressed immediately, maintaining high code quality and reducing the risk of introducing bugs into the main branch."
    },
    {
        "question": "What is one benefit of using Continuous Integration in a development team?",
        "options": {
            "A": "It allows developers to work in isolation without sharing code",
            "B": "It reduces the frequency of code integration, making it easier to manage changes",
            "C": "It facilitates faster identification of integration issues and bugs",
            "D": "It eliminates the need for version control systems"
        },
        "correct_answer": "C",
        "explanation": "One benefit of using Continuous Integration in a development team is that it facilitates faster identification of integration issues and bugs. By integrating code changes frequently and running automated tests, teams can quickly detect and resolve problems, leading to a more efficient development process."
    },
    {
        "question": "What is the primary purpose of a build scan in Gradle?",
        "options": {
            "A": "To visualize the timeline of task execution and identify performance bottlenecks",
            "B": "To automatically update Gradle and its plugins to the latest versions",
            "C": "To compile Java code more efficiently during the build process",
            "D": "To manage dependencies and their versions in a Gradle project"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of a build scan in Gradle is to visualize the timeline of task execution and identify performance bottlenecks. Build scans provide insights into how long tasks take, which tasks are slow, and how changes to the build configuration impact performance, allowing developers to optimize their builds effectively."
    },
    {
        "question": "How can build scans help in optimizing build performance?",
        "options": {
            "A": "By providing a detailed report of all dependencies used in the project",
            "B": "By allowing developers to skip unnecessary tasks during the build",
            "C": "By showing statistics on task execution and identifying slow tasks",
            "D": "By automatically configuring the Gradle Daemon for faster builds"
        },
        "correct_answer": "C",
        "explanation": "Build scans help optimize build performance by showing statistics on task execution and identifying slow tasks. This information allows developers to pinpoint areas that need improvement, such as tasks that take too long to execute, and make informed decisions on how to enhance build speed."
    },
    {
        "question": "What information can be visualized through build scans regarding dependency resolution?",
        "options": {
            "A": "The exact versions of all dependencies used in the project",
            "B": "The time spent resolving dependencies during the configuration and execution phases",
            "C": "The memory usage of the Gradle Daemon during builds",
            "D": "The number of tasks executed in parallel during the build"
        },
        "correct_answer": "B",
        "explanation": "Build scans can visualize the time spent resolving dependencies during the configuration and execution phases. This information is crucial for identifying performance issues related to dependency resolution, allowing developers to optimize their build configurations and reduce unnecessary delays."
    },
    {
        "question": "Which of the following is a benefit of using build scans in Gradle?",
        "options": {
            "A": "They automatically fix performance issues in the build process",
            "B": "They provide a visual representation of the build lifecycle phases",
            "C": "They allow for real-time monitoring of build performance",
            "D": "They help identify tasks that could benefit from incremental builds"
        },
        "correct_answer": "D",
        "explanation": "One of the benefits of using build scans in Gradle is that they help identify tasks that could benefit from incremental builds. By analyzing the build scan data, developers can see which tasks are frequently executed and determine if they can be optimized to skip unnecessary executions, thus improving overall build performance."
    },
    {
        "question": "What is the primary benefit of enabling parallel execution in Gradle builds?",
        "options": {
            "A": "It allows tasks to run sequentially for better resource management.",
            "B": "It enables multiple tasks to run simultaneously, reducing overall build time.",
            "C": "It ensures that all tasks are completed before any output is generated.",
            "D": "It simplifies the build configuration process."
        },
        "correct_answer": "B",
        "explanation": "Enabling parallel execution allows Gradle to run multiple tasks simultaneously, which can significantly reduce overall build time, especially in projects with multiple independent subprojects. This is particularly beneficial when tasks do not share state and can be executed concurrently."
    },
    {
        "question": "Which command is used to enable parallel execution for a specific Gradle task?",
        "options": {
            "A": "$ gradle <task> --parallel",
            "B": "$ gradle <task> --daemon",
            "C": "$ gradle <task> --configuration-cache",
            "D": "$ gradle <task> --build-cache"
        },
        "correct_answer": "A",
        "explanation": "To enable parallel execution for a specific Gradle task, you use the command '$ gradle <task> --parallel'. This command instructs Gradle to execute tasks belonging to different subprojects in parallel, which can lead to faster build times."
    },
    {
        "question": "What is a potential limitation of parallel execution in Gradle builds?",
        "options": {
            "A": "It can only be used with single-project builds.",
            "B": "It may not improve build times if many tasks share dependencies.",
            "C": "It requires all tasks to be completed before any output is generated.",
            "D": "It is not compatible with the Gradle Daemon."
        },
        "correct_answer": "B",
        "explanation": "A potential limitation of parallel execution is that it may not significantly improve build times if many tasks share dependencies or if the execution time is dominated by a single subproject. In such cases, the benefits of running tasks in parallel may be minimal."
    },
    {
        "question": "How can you set parallel execution as the default behavior for all Gradle builds?",
        "options": {
            "A": "By adding 'org.gradle.parallel=true' to the build.gradle file.",
            "B": "By adding 'org.gradle.parallel=true' to the gradle.properties file.",
            "C": "By using the command line option '--parallel' for every build.",
            "D": "By configuring the build scan settings."
        },
        "correct_answer": "B",
        "explanation": "To set parallel execution as the default behavior for all Gradle builds, you can add 'org.gradle.parallel=true' to the gradle.properties file in the project root or your Gradle home. This configuration ensures that parallel execution is enabled for every build without needing to specify it each time."
    },
    {
        "question": "What is the primary benefit of using the Gradle Daemon?",
        "options": {
            "A": "It reduces build times by caching project information across builds.",
            "B": "It allows for the execution of multiple tasks simultaneously.",
            "C": "It automatically updates Gradle to the latest version.",
            "D": "It eliminates the need for a build configuration."
        },
        "correct_answer": "A",
        "explanation": "The Gradle Daemon primarily benefits build performance by caching project information across builds, which allows subsequent builds to start faster without the overhead of JVM startup. This caching mechanism helps to optimize the build process significantly."
    },
    {
        "question": "How can you enable the Gradle Daemon for a specific build?",
        "options": {
            "A": "By adding 'org.gradle.daemon=true' to the build.gradle file.",
            "B": "By using the command line flag '--daemon' when running a Gradle task.",
            "C": "By updating the Gradle version to the latest release.",
            "D": "By configuring the build cache in the gradle.properties file."
        },
        "correct_answer": "B",
        "explanation": "You can enable the Gradle Daemon for a specific build by using the command line flag '--daemon' when running a Gradle task. This allows the Daemon to be activated for that particular execution, improving build performance."
    },
    {
        "question": "What happens if the Gradle Daemon is disabled?",
        "options": {
            "A": "Builds will run faster due to reduced memory usage.",
            "B": "Every Gradle build will have to wait for JVM startup, increasing build times.",
            "C": "The build cache will not be utilized.",
            "D": "Parallel execution of tasks will be automatically enabled."
        },
        "correct_answer": "B",
        "explanation": "If the Gradle Daemon is disabled, every Gradle build must wait for the JVM to start up, which can significantly increase build times. The Daemon is designed to run in the background and keep the JVM warm, thus reducing the overhead associated with starting a new JVM for each build."
    },
    {
        "question": "Which of the following statements about the Gradle Daemon is true?",
        "options": {
            "A": "The Gradle Daemon is only beneficial for Continuous Integration (CI) environments.",
            "B": "The Gradle Daemon automatically shuts down when memory pressure occurs.",
            "C": "The Gradle Daemon must be manually started for every build.",
            "D": "The Gradle Daemon is not compatible with older versions of Gradle."
        },
        "correct_answer": "B",
        "explanation": "The Gradle Daemon automatically shuts down when memory pressure occurs, which helps manage system resources effectively. This feature ensures that the Daemon does not consume excessive memory, making it safe to leave enabled during builds."
    },
    {
        "question": "What is the primary benefit of enabling the configuration cache in Gradle?",
        "options": {
            "A": "It allows Gradle to skip the configuration phase entirely when inputs remain unchanged.",
            "B": "It increases the memory allocation for Gradle builds.",
            "C": "It automatically updates all plugins to their latest versions.",
            "D": "It enables parallel execution of all tasks regardless of dependencies."
        },
        "correct_answer": "A",
        "explanation": "The primary benefit of enabling the configuration cache is that it allows Gradle to skip the configuration phase entirely when the build configuration inputs remain unchanged. This can significantly reduce build times, as the configuration phase can be time-consuming, especially for large projects."
    },
    {
        "question": "Which of the following is a requirement for the configuration cache to be effective?",
        "options": {
            "A": "All tasks must be executed in a single thread.",
            "B": "Build configuration inputs must remain the same across builds.",
            "C": "The Gradle Daemon must be disabled.",
            "D": "Only one version of Gradle can be used in a project."
        },
        "correct_answer": "B",
        "explanation": "For the configuration cache to be effective, build configuration inputs must remain the same across builds. This includes scripts, properties, and environment variables. If any of these inputs change, Gradle will need to re-run the configuration phase, negating the benefits of the cache."
    },
    {
        "question": "How can you enable the configuration cache by default in Gradle?",
        "options": {
            "A": "By adding 'org.gradle.configuration-cache=true' to the build.gradle file.",
            "B": "By using the command line flag '--enable-cache'.",
            "C": "By adding 'org.gradle.configuration-cache=true' to the gradle.properties file.",
            "D": "By setting the JVM arguments to include cache settings."
        },
        "correct_answer": "C",
        "explanation": "To enable the configuration cache by default in Gradle, you need to add 'org.gradle.configuration-cache=true' to the gradle.properties file in the project root or your Gradle home. This setting ensures that the configuration cache is utilized for all builds unless overridden."
    },
    {
        "question": "What happens if the configuration cache is not supported by a plugin used in the build?",
        "options": {
            "A": "The build will fail immediately.",
            "B": "Gradle will skip the configuration cache for that build.",
            "C": "The plugin will be automatically updated to support the cache.",
            "D": "The build will run slower due to additional overhead."
        },
        "correct_answer": "B",
        "explanation": "If the configuration cache is not supported by a plugin used in the build, Gradle will skip the configuration cache for that build. This means that the configuration phase will be executed normally, which may result in longer build times if the configuration phase is time-consuming."
    },
    {
        "question": "What is the primary benefit of using incremental builds in Gradle?",
        "options": {
            "A": "To skip running tasks that have not changed since the last execution",
            "B": "To ensure all tasks run every time a build is executed",
            "C": "To increase the overall memory usage during builds",
            "D": "To compile all source files regardless of changes"
        },
        "correct_answer": "A",
        "explanation": "The primary benefit of using incremental builds in Gradle is to skip running tasks that have not changed since the last execution. This optimization saves time and resources by only executing tasks that require updates, thus improving build performance."
    },
    {
        "question": "How does Gradle determine whether to skip a task during an incremental build?",
        "options": {
            "A": "By checking if the task's inputs and outputs have changed",
            "B": "By evaluating the task's execution time in previous builds",
            "C": "By analyzing the number of dependencies associated with the task",
            "D": "By comparing the task's name with other tasks in the project"
        },
        "correct_answer": "A",
        "explanation": "Gradle determines whether to skip a task during an incremental build by checking if the task's inputs and outputs have changed since the last execution. If there are no changes, Gradle can safely skip the task, leading to faster build times."
    },
    {
        "question": "What must be specified for a custom task to be compatible with incremental builds?",
        "options": {
            "A": "The task's execution time",
            "B": "The task's inputs and outputs",
            "C": "The task's dependencies",
            "D": "The task's execution order"
        },
        "correct_answer": "B",
        "explanation": "For a custom task to be compatible with incremental builds, it is essential to specify the task's inputs and outputs. This allows Gradle to track changes and determine whether the task needs to be executed based on those inputs and outputs."
    },
    {
        "question": "What is a potential drawback of not using incremental builds in Gradle?",
        "options": {
            "A": "Increased build times due to unnecessary task executions",
            "B": "Reduced memory usage during builds",
            "C": "Simplified build configuration",
            "D": "Improved task execution order"
        },
        "correct_answer": "A",
        "explanation": "A potential drawback of not using incremental builds in Gradle is increased build times due to unnecessary task executions. Without incremental builds, Gradle would run all tasks every time, regardless of whether their inputs or outputs have changed, leading to inefficiencies."
    },
    {
        "question": "What is the primary purpose of the build cache in Gradle?",
        "options": {
            "A": "To store task outputs for specific inputs to avoid re-running tasks",
            "B": "To manage project dependencies and their versions",
            "C": "To compile source code into executable files",
            "D": "To monitor system performance during builds"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the build cache in Gradle is to store task outputs for specific inputs. This allows Gradle to retrieve the output from the cache instead of re-running the task when the same input is encountered again, thereby improving build performance."
    },
    {
        "question": "How can you enable the build cache by default in a Gradle project?",
        "options": {
            "A": "By adding 'org.gradle.caching=true' to the build.gradle file",
            "B": "By using the command line flag '--enable-cache'",
            "C": "By adding 'org.gradle.caching=true' to the gradle.properties file",
            "D": "By setting the cache size in the settings.gradle file"
        },
        "correct_answer": "C",
        "explanation": "To enable the build cache by default in a Gradle project, you should add 'org.gradle.caching=true' to the gradle.properties file. This setting ensures that the build cache is utilized for all builds without needing to specify it each time."
    },
    {
        "question": "What is a benefit of using a shared build cache?",
        "options": {
            "A": "It allows for faster builds across multiple machines",
            "B": "It eliminates the need for version control",
            "C": "It reduces the size of the project files",
            "D": "It automatically updates all dependencies"
        },
        "correct_answer": "A",
        "explanation": "A shared build cache allows for faster builds across multiple machines by storing and reusing task outputs. This means that if one machine has already built a task with specific inputs, other machines can retrieve that output from the cache instead of rebuilding it, thus saving time."
    },
    {
        "question": "Which of the following statements about the build cache is true?",
        "options": {
            "A": "The build cache is enabled by default in all Gradle projects.",
            "B": "The build cache can only be used locally and not shared across machines.",
            "C": "The build cache can significantly reduce build times for repeated tasks.",
            "D": "The build cache requires manual intervention for every build."
        },
        "correct_answer": "C",
        "explanation": "The build cache can significantly reduce build times for repeated tasks by storing the outputs of tasks based on their inputs. When the same task is run again with the same inputs, Gradle can retrieve the output from the cache instead of executing the task again, leading to faster builds."
    },
    {
        "question": "What is the primary purpose of dependency resolution in Gradle?",
        "options": {
            "A": "To simplify the integration of third-party libraries into projects",
            "B": "To compile Java code faster",
            "C": "To manage project configurations",
            "D": "To execute tasks in parallel"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of dependency resolution in Gradle is to simplify the integration of third-party libraries and other dependencies into projects. This process involves contacting remote servers to discover and download the necessary dependencies, which is essential for building and running applications."
    },
    {
        "question": "Which of the following strategies can help optimize dependency resolution in Gradle?",
        "options": {
            "A": "Using dynamic versions for all dependencies",
            "B": "Minimizing the number of declared repositories",
            "C": "Applying all plugins to every subproject",
            "D": "Forcing Gradle to resolve dependencies during configuration"
        },
        "correct_answer": "B",
        "explanation": "Minimizing the number of declared repositories can help optimize dependency resolution in Gradle. By limiting the number of repositories, Gradle reduces the time spent searching for dependencies, which can significantly improve build performance."
    },
    {
        "question": "What is a potential drawback of using dynamic versions in Gradle dependencies?",
        "options": {
            "A": "They require more frequent network calls to check for updates.",
            "B": "They are always faster to resolve than fixed versions.",
            "C": "They prevent caching of dependency versions.",
            "D": "They automatically update all dependencies to the latest version."
        },
        "correct_answer": "A",
        "explanation": "Using dynamic versions in Gradle dependencies can lead to more frequent network calls to check for updates, which can slow down the build process. This is because Gradle must contact remote repositories to find the latest versions, increasing the overall time spent on dependency resolution."
    },
    {
        "question": "How can you avoid dependency resolution during the configuration phase in Gradle?",
        "options": {
            "A": "By using the `files` property in the configuration file.",
            "B": "By using a `doFirst()` action to resolve dependencies.",
            "C": "By declaring all dependencies as dynamic versions.",
            "D": "By applying all plugins at the root project level."
        },
        "correct_answer": "B",
        "explanation": "To avoid dependency resolution during the configuration phase in Gradle, you can use a `doFirst()` action to resolve dependencies. This ensures that the resolution occurs only when the task is executed, rather than during the configuration phase, which runs on every build."
    },
    {
        "question": "What is one of the primary goals of optimizing Java projects in Gradle?",
        "options": {
            "A": "To increase the number of dependencies used in the project",
            "B": "To reduce the overall build time",
            "C": "To ensure all tasks run sequentially",
            "D": "To eliminate the need for testing"
        },
        "correct_answer": "B",
        "explanation": "The primary goal of optimizing Java projects in Gradle is to reduce the overall build time. This can be achieved through various techniques such as parallel execution, incremental compilation, and optimizing dependency resolution, which all contribute to a more efficient build process."
    },
    {
        "question": "Which technique can be used to run multiple test cases simultaneously in Gradle?",
        "options": {
            "A": "Forking tests into multiple processes",
            "B": "Running tests sequentially",
            "C": "Disabling test reports",
            "D": "Using dynamic versions for dependencies"
        },
        "correct_answer": "A",
        "explanation": "Forking tests into multiple processes allows Gradle to run multiple test cases simultaneously, which can significantly speed up the testing phase of the build. This is particularly useful for projects with a large number of tests, as it utilizes available CPU resources more effectively."
    },
    {
        "question": "What is the purpose of enabling incremental compilation in Gradle?",
        "options": {
            "A": "To compile all classes every time a change is made",
            "B": "To skip recompiling classes that have not changed",
            "C": "To increase the number of dependencies",
            "D": "To ensure all tasks are executed in order"
        },
        "correct_answer": "B",
        "explanation": "Enabling incremental compilation in Gradle allows the build system to skip recompiling classes that have not changed since the last build. This optimization reduces build times by only recompiling affected classes, which is especially beneficial in large projects with many classes."
    },
    {
        "question": "How can Gradle optimize dependency resolution to improve build performance?",
        "options": {
            "A": "By allowing dynamic versions for all dependencies",
            "B": "By minimizing the number of declared repositories",
            "C": "By increasing the number of transitive dependencies",
            "D": "By applying all plugins to every subproject"
        },
        "correct_answer": "B",
        "explanation": "Minimizing the number of declared repositories can optimize dependency resolution in Gradle, as it reduces the number of network requests required to resolve dependencies. This leads to faster build times by limiting the overhead associated with searching through multiple repositories."
    },
    {
        "question": "What is a key benefit of optimizing Android projects using Gradle?",
        "options": {
            "A": "It allows for faster build times and improved developer productivity.",
            "B": "It eliminates the need for any testing during the build process.",
            "C": "It guarantees that all dependencies will be automatically updated.",
            "D": "It ensures that the project will run on all versions of Android without issues."
        },
        "correct_answer": "A",
        "explanation": "Optimizing Android projects using Gradle primarily focuses on achieving faster build times, which enhances developer productivity. By reducing build times, developers can iterate more quickly and respond to issues more efficiently, ultimately improving the overall development workflow."
    },
    {
        "question": "Which of the following strategies can help improve build performance in Android projects?",
        "options": {
            "A": "Running all tests sequentially to avoid resource conflicts.",
            "B": "Using dynamic versions for all dependencies to ensure the latest updates.",
            "C": "Enabling parallel execution of tasks to utilize available resources effectively.",
            "D": "Applying all plugins to every subproject to ensure consistency."
        },
        "correct_answer": "C",
        "explanation": "Enabling parallel execution of tasks is a strategy that can significantly improve build performance in Android projects. By allowing independent tasks to run simultaneously, developers can reduce overall build times, especially in multi-subproject setups where tasks do not depend on each other."
    },
    {
        "question": "What is the purpose of the Gradle Daemon in the context of build optimization?",
        "options": {
            "A": "To automatically update all project dependencies.",
            "B": "To cache project information and reduce build times.",
            "C": "To run tests in a separate environment.",
            "D": "To compile code in real-time as changes are made."
        },
        "correct_answer": "B",
        "explanation": "The Gradle Daemon is designed to cache project information across builds, which helps reduce build times. By running in the background, it avoids the overhead of JVM startup for each build, allowing for faster execution of Gradle tasks and improving overall build performance."
    },
    {
        "question": "How can developers minimize the impact of dependency resolution on build performance?",
        "options": {
            "A": "By declaring all dependencies as dynamic versions.",
            "B": "By limiting the number of declared repositories and optimizing their order.",
            "C": "By applying all dependencies to every subproject.",
            "D": "By resolving dependencies during the configuration phase."
        },
        "correct_answer": "B",
        "explanation": "Minimizing the impact of dependency resolution on build performance can be achieved by limiting the number of declared repositories and optimizing their order. This reduces the time spent searching for dependencies and minimizes network requests, leading to faster build times."
    }
]