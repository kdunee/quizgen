[
    {
        "question": "What is the primary purpose of the configuration cache in Gradle?",
        "options": {
            "A": "To cache the outputs of tasks for faster execution",
            "B": "To improve build performance by caching the configuration phase results",
            "C": "To store user-defined build scripts for reuse",
            "D": "To manage dependencies between different projects"
        },
        "correct_answer": "B",
        "explanation": "The configuration cache is designed to improve build performance by caching the results of the configuration phase. This allows Gradle to skip the configuration phase in subsequent builds when the inputs have not changed, leading to faster build times."
    },
    {
        "question": "Which of the following statements about the configuration cache is true?",
        "options": {
            "A": "It is enabled by default in all Gradle builds.",
            "B": "It caches the outputs of tasks and intermediate files.",
            "C": "It can be invalidated if build configuration inputs change.",
            "D": "It is only applicable to Java projects."
        },
        "correct_answer": "C",
        "explanation": "The configuration cache can be invalidated if any of the build configuration inputs, such as build scripts or system properties, change. This ensures that the cache remains accurate and relevant for the current build context."
    },
    {
        "question": "What happens when a configuration cache entry is reused in Gradle?",
        "options": {
            "A": "Gradle runs the configuration phase again to ensure accuracy.",
            "B": "Gradle skips the configuration phase and directly executes the tasks.",
            "C": "Gradle discards the previous cache entry and creates a new one.",
            "D": "Gradle automatically updates all build scripts to the latest version."
        },
        "correct_answer": "B",
        "explanation": "When a configuration cache entry is reused, Gradle skips the configuration phase entirely and directly executes the tasks associated with that entry. This significantly speeds up the build process, as the configuration phase can be time-consuming."
    },
    {
        "question": "Which of the following is a requirement for tasks to be compatible with the configuration cache?",
        "options": {
            "A": "Tasks must reference live JVM state types.",
            "B": "Tasks must not read system properties at configuration time.",
            "C": "Tasks must be defined in a separate Gradle file.",
            "D": "Tasks must use the Project object at execution time."
        },
        "correct_answer": "B",
        "explanation": "Tasks must not read system properties or environment variables directly at configuration time, as doing so makes these variables build configuration inputs. Instead, they should use value providers to avoid invalidating the configuration cache when the values change."
    },
    {
        "question": "What is the primary benefit of using the configuration cache in Gradle?",
        "options": {
            "A": "To improve build performance by skipping the configuration phase when possible",
            "B": "To ensure all tasks are executed in a specific order",
            "C": "To automatically update all project dependencies",
            "D": "To provide a graphical interface for build management"
        },
        "correct_answer": "A",
        "explanation": "The configuration cache primarily improves build performance by allowing Gradle to skip the configuration phase for subsequent builds when the build configuration inputs have not changed. This means that if nothing affecting the build configuration has changed, Gradle can reuse the cached configuration, leading to faster build times."
    },
    {
        "question": "Which of the following statements about the configuration cache is true?",
        "options": {
            "A": "It caches the outputs of the build execution phase.",
            "B": "It is enabled by default in all Gradle builds.",
            "C": "It caches the results of the configuration phase for reuse in future builds.",
            "D": "It requires all plugins to be compatible with the build cache."
        },
        "correct_answer": "C",
        "explanation": "The configuration cache specifically caches the results of the configuration phase, allowing Gradle to reuse this information in future builds. This is different from the build cache, which caches the outputs of the execution phase. The configuration cache is not enabled by default and may have compatibility issues with certain plugins."
    },
    {
        "question": "What happens if a build configuration input changes after a configuration cache entry has been created?",
        "options": {
            "A": "Gradle will automatically update the cache entry.",
            "B": "Gradle will invalidate the cache entry and rerun the configuration phase.",
            "C": "The build will fail immediately.",
            "D": "Gradle will ignore the change and continue using the cached entry."
        },
        "correct_answer": "B",
        "explanation": "If a build configuration input changes after a configuration cache entry has been created, Gradle will invalidate that cache entry and rerun the configuration phase to ensure that the build reflects the current state of the inputs. This ensures that builds are consistent and accurate based on the latest configuration."
    },
    {
        "question": "Which of the following is a limitation of the configuration cache?",
        "options": {
            "A": "It can only be used with Java projects.",
            "B": "It does not support all core Gradle plugins and features.",
            "C": "It requires a specific version of Gradle to be installed.",
            "D": "It can only cache configurations for a single task."
        },
        "correct_answer": "B",
        "explanation": "One of the limitations of the configuration cache is that it does not support all core Gradle plugins and features. Full support for the configuration cache is a work in progress, and some plugins may require changes to be compatible with this feature."
    },
    {
        "question": "What is the primary purpose of the configuration cache in Gradle?",
        "options": {
            "A": "To cache the outputs of tasks for faster execution",
            "B": "To cache the results of the configuration phase for reuse in subsequent builds",
            "C": "To store build scripts for later use",
            "D": "To manage dependencies between tasks"
        },
        "correct_answer": "B",
        "explanation": "The configuration cache is designed to cache the results of the configuration phase, allowing Gradle to skip this phase in subsequent builds if the inputs have not changed. This significantly improves build performance by reusing the cached configuration data."
    },
    {
        "question": "Which of the following statements about the configuration cache is true?",
        "options": {
            "A": "It is enabled by default in all Gradle builds.",
            "B": "It caches the outputs of tasks and intermediate files.",
            "C": "It can be invalidated if build configuration inputs change.",
            "D": "It is only applicable to Java projects."
        },
        "correct_answer": "C",
        "explanation": "The configuration cache can be invalidated if any of the build configuration inputs, such as build scripts or system properties, change. This ensures that the cache remains accurate and relevant for the current build context."
    },
    {
        "question": "What happens when Gradle detects a change in build configuration inputs while using the configuration cache?",
        "options": {
            "A": "Gradle will automatically update the cache without any user intervention.",
            "B": "Gradle will skip the configuration phase and use the existing cache.",
            "C": "Gradle will invalidate the cache and run the configuration phase again.",
            "D": "Gradle will ignore the changes and continue using the cached configuration."
        },
        "correct_answer": "C",
        "explanation": "When Gradle detects a change in build configuration inputs, it invalidates the existing configuration cache entry and runs the configuration phase again. This ensures that the build configuration is up-to-date and reflects any changes made."
    },
    {
        "question": "Which of the following is a benefit of using the configuration cache?",
        "options": {
            "A": "It allows for the execution of tasks in a sequential manner.",
            "B": "It reduces the peak heap usage required for a given set of tasks.",
            "C": "It eliminates the need for build scripts.",
            "D": "It ensures that all tasks run in a single thread."
        },
        "correct_answer": "B",
        "explanation": "One of the benefits of using the configuration cache is that it reduces the peak heap usage required for executing a set of tasks. By caching the configuration state and discarding unnecessary data, Gradle can optimize memory usage during builds."
    },
    {
        "question": "What are build configuration inputs in the context of Gradle's configuration cache?",
        "options": {
            "A": "Elements that affect the build configuration and can invalidate the cache if changed",
            "B": "Outputs generated by tasks during the execution phase",
            "C": "Scripts that define the tasks to be executed in a build",
            "D": "Plugins that enhance the functionality of Gradle builds"
        },
        "correct_answer": "A",
        "explanation": "Build configuration inputs are elements that affect the build configuration, such as build scripts, system properties, and environment variables. If any of these inputs change, the configuration cache is invalidated, requiring Gradle to re-run the configuration phase to ensure the build is accurate."
    },
    {
        "question": "Why is it important to manage build configuration inputs carefully?",
        "options": {
            "A": "To ensure that the build outputs are always the same",
            "B": "To prevent unnecessary cache invalidation and improve build performance",
            "C": "To allow for more complex build scripts",
            "D": "To enable the use of deprecated Gradle features"
        },
        "correct_answer": "B",
        "explanation": "Managing build configuration inputs carefully is crucial to prevent unnecessary cache invalidation, which can degrade build performance. By minimizing changes to these inputs, developers can take full advantage of the configuration cache, leading to faster build times."
    },
    {
        "question": "Which of the following is NOT considered a build configuration input?",
        "options": {
            "A": "Build scripts",
            "B": "Task outputs",
            "C": "System properties",
            "D": "Environment variables"
        },
        "correct_answer": "B",
        "explanation": "Task outputs are not considered build configuration inputs. Instead, build configuration inputs include elements like build scripts, system properties, and environment variables that can affect the configuration phase and invalidate the cache if they change."
    },
    {
        "question": "What happens when a build configuration input changes?",
        "options": {
            "A": "The configuration cache is reused without any issues",
            "B": "Gradle skips the configuration phase entirely",
            "C": "The configuration cache is invalidated, and the configuration phase is re-run",
            "D": "Gradle automatically updates the build scripts to accommodate the change"
        },
        "correct_answer": "C",
        "explanation": "When a build configuration input changes, the configuration cache is invalidated. This means that Gradle must re-run the configuration phase to ensure that the build is accurate and reflects the new state of the inputs."
    },
    {
        "question": "What is the primary purpose of the serialization mechanism in the context of the configuration cache?",
        "options": {
            "A": "To store the state of tasks and their dependencies for reuse in future builds",
            "B": "To compress build scripts for faster execution",
            "C": "To convert build scripts into a binary format for security",
            "D": "To enable real-time monitoring of build processes"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of the serialization mechanism in the context of the configuration cache is to store the state of tasks and their dependencies. This allows Gradle to reuse this information in future builds, thereby improving build performance by skipping the configuration phase when possible."
    },
    {
        "question": "Which of the following types is NOT allowed to be referenced by tasks during serialization?",
        "options": {
            "A": "Live JVM state types",
            "B": "Gradle model types",
            "C": "Immutable data types",
            "D": "Dependency management types"
        },
        "correct_answer": "C",
        "explanation": "Tasks must not reference live JVM state types, Gradle model types, or dependency management types during serialization. Immutable data types, however, are generally allowed as they do not pose the same risks for serialization and state management."
    },
    {
        "question": "What happens if a task references a disallowed type during the configuration phase?",
        "options": {
            "A": "The task will execute successfully but will not be cached.",
            "B": "The build will fail due to a configuration cache problem.",
            "C": "The task will be ignored and not executed.",
            "D": "The task will run in a separate process."
        },
        "correct_answer": "B",
        "explanation": "If a task references a disallowed type during the configuration phase, the build will fail due to a configuration cache problem. This is because the configuration cache requires strict adherence to certain rules regarding what can be serialized."
    },
    {
        "question": "How does Gradle ensure that the state of tasks is correctly serialized for the configuration cache?",
        "options": {
            "A": "By using a custom serialization protocol that ignores all types.",
            "B": "By modifying the bytecode of classes on the build script classpath.",
            "C": "By requiring all tasks to implement a specific interface.",
            "D": "By running all tasks in a virtual environment."
        },
        "correct_answer": "B",
        "explanation": "Gradle ensures that the state of tasks is correctly serialized for the configuration cache by modifying the bytecode of classes on the build script classpath. This allows Gradle to track and manage the inputs and outputs of tasks effectively."
    },
    {
        "question": "What is the primary purpose of the configuration cache in Gradle?",
        "options": {
            "A": "To cache the outputs of tasks for faster execution",
            "B": "To improve build performance by caching the configuration phase results",
            "C": "To store user-defined tasks for reuse in future builds",
            "D": "To manage dependencies between different Gradle projects"
        },
        "correct_answer": "B",
        "explanation": "The configuration cache is designed to improve build performance by caching the results of the configuration phase. This allows Gradle to skip the configuration phase in subsequent builds when the inputs have not changed, leading to faster build times."
    },
    {
        "question": "Which of the following statements about the configuration cache is true?",
        "options": {
            "A": "It is enabled by default in all Gradle builds.",
            "B": "It caches the outputs of tasks and intermediate files.",
            "C": "It can be used to skip the configuration phase if inputs have not changed.",
            "D": "It is only applicable to core Gradle plugins."
        },
        "correct_answer": "C",
        "explanation": "The configuration cache allows Gradle to skip the configuration phase entirely when the inputs that affect the build configuration have not changed. This is a key feature that enhances build performance, but it is not enabled by default."
    },
    {
        "question": "What happens if a build configuration input changes after a configuration cache entry has been created?",
        "options": {
            "A": "The configuration cache entry is reused without any issues.",
            "B": "Gradle will ignore the change and continue using the cached entry.",
            "C": "Gradle will invalidate the cache entry and rerun the configuration phase.",
            "D": "The build will fail immediately."
        },
        "correct_answer": "C",
        "explanation": "If a build configuration input changes after a configuration cache entry has been created, Gradle will invalidate that cache entry and rerun the configuration phase to ensure that the build reflects the current state of the inputs."
    },
    {
        "question": "Which of the following is a requirement for tasks to be compatible with the configuration cache?",
        "options": {
            "A": "Tasks must reference live JVM state types.",
            "B": "Tasks must not read system properties or environment variables at configuration time.",
            "C": "Tasks can directly access other task instances during execution.",
            "D": "Tasks must be defined in a separate Gradle project."
        },
        "correct_answer": "B",
        "explanation": "One of the key requirements for tasks to be compatible with the configuration cache is that they must not read system properties or environment variables directly at configuration time. Instead, they should use value providers to avoid invalidating the cache."
    },
    {
        "question": "What is the primary benefit of enabling parallel execution in Gradle builds?",
        "options": {
            "A": "It allows tasks to run sequentially to avoid conflicts.",
            "B": "It improves build performance by running tasks concurrently.",
            "C": "It simplifies the build script syntax.",
            "D": "It ensures that all tasks are completed before starting the next build."
        },
        "correct_answer": "B",
        "explanation": "The primary benefit of enabling parallel execution in Gradle builds is that it improves build performance by allowing multiple tasks to run concurrently. This can significantly reduce the overall build time, especially in projects with many independent tasks."
    },
    {
        "question": "Which of the following statements is true regarding parallel execution in Gradle?",
        "options": {
            "A": "All tasks can run in parallel without any restrictions.",
            "B": "Tasks with dependencies cannot run in parallel.",
            "C": "Parallel execution is enabled by default in all Gradle builds.",
            "D": "Parallel execution can lead to increased memory usage."
        },
        "correct_answer": "B",
        "explanation": "In Gradle, tasks with dependencies cannot run in parallel because their execution order must be maintained. If one task depends on the output of another, it must wait for that task to complete before it can start. This ensures that the build process remains consistent and correct."
    },
    {
        "question": "What is a potential drawback of enabling parallel execution in Gradle?",
        "options": {
            "A": "It can lead to faster build times.",
            "B": "It may cause increased complexity in task management.",
            "C": "It guarantees that all tasks will complete successfully.",
            "D": "It reduces the need for task dependencies."
        },
        "correct_answer": "B",
        "explanation": "A potential drawback of enabling parallel execution in Gradle is that it may cause increased complexity in task management. Developers need to ensure that tasks are designed to be independent and do not interfere with each other, which can complicate the build script."
    },
    {
        "question": "How can parallel execution be enabled in a Gradle build?",
        "options": {
            "A": "By adding a specific plugin to the build script.",
            "B": "By setting the `org.gradle.parallel` property to true.",
            "C": "By using the `--parallel` command line option only.",
            "D": "By modifying the Gradle wrapper version."
        },
        "correct_answer": "B",
        "explanation": "Parallel execution in a Gradle build can be enabled by setting the `org.gradle.parallel` property to true in the `gradle.properties` file or by using the `--parallel` command line option. This allows Gradle to run tasks concurrently where possible."
    },
    {
        "question": "What is the primary purpose of the configuration cache in Gradle?",
        "options": {
            "A": "To store build outputs for reuse in future builds",
            "B": "To cache the results of the configuration phase for faster subsequent builds",
            "C": "To manage dependencies between tasks",
            "D": "To log errors during the build process"
        },
        "correct_answer": "B",
        "explanation": "The configuration cache is designed to cache the results of the configuration phase, allowing Gradle to skip this phase in subsequent builds when no relevant changes have occurred. This significantly improves build performance by reducing the time spent in configuration."
    },
    {
        "question": "Which of the following is a limitation of the configuration cache?",
        "options": {
            "A": "It can only be used with Java projects",
            "B": "It does not support all Gradle plugins and features",
            "C": "It requires all tasks to be executed in sequence",
            "D": "It can only cache outputs, not configurations"
        },
        "correct_answer": "B",
        "explanation": "One of the key limitations of the configuration cache is that it does not support all Gradle plugins and features. Some plugins may require changes to be compatible with the configuration cache, and full support is still a work in progress."
    },
    {
        "question": "What happens when a build configuration input changes after a configuration cache entry has been created?",
        "options": {
            "A": "The configuration cache entry is reused without any issues",
            "B": "Gradle will ignore the change and continue using the cached entry",
            "C": "The configuration cache entry is invalidated, and the configuration phase is run again",
            "D": "The build will fail immediately"
        },
        "correct_answer": "C",
        "explanation": "If a build configuration input changes after a configuration cache entry has been created, Gradle will invalidate that entry and rerun the configuration phase. This ensures that the build reflects the latest configuration inputs."
    },
    {
        "question": "How can users diagnose issues with the configuration cache?",
        "options": {
            "A": "By checking the Gradle build logs for warnings",
            "B": "By generating an HTML report that details configuration cache problems",
            "C": "By running the build with the `--debug` flag",
            "D": "By manually inspecting the configuration cache files"
        },
        "correct_answer": "B",
        "explanation": "Users can diagnose issues with the configuration cache by generating an HTML report that details any problems encountered during caching. This report provides insights into the specific configuration inputs that caused issues, helping users to troubleshoot effectively."
    },
    {
        "question": "What is the primary purpose of testing build logic in Gradle?",
        "options": {
            "A": "To ensure that the build process is efficient and fast",
            "B": "To verify that the build logic behaves as expected and is free of errors",
            "C": "To check the compatibility of Gradle with different programming languages",
            "D": "To optimize the memory usage of the build process"
        },
        "correct_answer": "B",
        "explanation": "The primary purpose of testing build logic in Gradle is to verify that the build logic behaves as expected and is free of errors. This involves running tests to ensure that tasks execute correctly and produce the desired outcomes, which is crucial for maintaining the integrity of the build process."
    },
    {
        "question": "Which tool is recommended for testing Gradle plugins and build logic?",
        "options": {
            "A": "JUnit",
            "B": "Gradle TestKit",
            "C": "Mockito",
            "D": "Spock"
        },
        "correct_answer": "B",
        "explanation": "Gradle TestKit is the recommended tool for testing Gradle plugins and build logic. It provides a framework for writing tests that can simulate Gradle builds, allowing developers to verify that their build logic works as intended in a controlled environment."
    },
    {
        "question": "What is a key step when testing build logic with Gradle TestKit?",
        "options": {
            "A": "Running tests only once to save time",
            "B": "Priming the configuration cache before running tests",
            "C": "Using only the latest version of Gradle",
            "D": "Disabling all plugins during testing"
        },
        "correct_answer": "B",
        "explanation": "A key step when testing build logic with Gradle TestKit is to prime the configuration cache before running tests. This involves executing the tasks once to store the configuration in the cache, which can then be reused in subsequent runs to improve performance and validate the behavior of the build logic."
    },
    {
        "question": "What should be done if problems are encountered while testing build logic with the configuration cache?",
        "options": {
            "A": "Ignore the problems and continue testing",
            "B": "Turn the problems into warnings and investigate further",
            "C": "Immediately report the issues to Gradle support",
            "D": "Disable the configuration cache for all future tests"
        },
        "correct_answer": "B",
        "explanation": "If problems are encountered while testing build logic with the configuration cache, it is advisable to turn the problems into warnings and investigate further. This allows developers to understand the nature of the issues and address them without halting the testing process entirely."
    },
    {
        "question": "What is the primary purpose of encrypting the configuration cache in Gradle?",
        "options": {
            "A": "To prevent unauthorized access to sensitive data stored in the cache",
            "B": "To improve the performance of the build process",
            "C": "To allow sharing of the cache between different machines",
            "D": "To ensure compatibility with all Gradle plugins"
        },
        "correct_answer": "A",
        "explanation": "The primary purpose of encrypting the configuration cache in Gradle is to prevent unauthorized access to sensitive data that may be stored in the cache. This encryption ensures that even if someone gains access to the cache files, they cannot easily read the sensitive information contained within."
    },
    {
        "question": "How does Gradle manage the encryption key for the configuration cache?",
        "options": {
            "A": "It uses a user-defined key provided through an environment variable",
            "B": "It generates a machine-specific secret key and caches it securely",
            "C": "It does not use any encryption for the configuration cache",
            "D": "It stores the key in the project directory for easy access"
        },
        "correct_answer": "B",
        "explanation": "Gradle manages the encryption key for the configuration cache by generating a machine-specific secret key, which is cached securely under the user's Gradle home directory. This ensures that the key is unique to the machine and enhances the security of the cached data."
    },
    {
        "question": "What should be done to ensure that the same encryption key is used across multiple Gradle runs?",
        "options": {
            "A": "Set the `GRADLE_ENCRYPTION_KEY` environment variable with a consistent value",
            "B": "Use the default key generated by Gradle without any changes",
            "C": "Manually copy the key from one machine to another",
            "D": "Change the key for each build to enhance security"
        },
        "correct_answer": "A",
        "explanation": "To ensure that the same encryption key is used across multiple Gradle runs, the `GRADLE_ENCRYPTION_KEY` environment variable must be set with a consistent value. This allows Gradle to read and write the cached configuration data securely without issues related to key mismatches."
    },
    {
        "question": "What is a recommended practice for handling secrets in the configuration cache?",
        "options": {
            "A": "Store secrets directly in the configuration cache for easy access",
            "B": "Use the `gradle.properties` file to store secrets securely",
            "C": "Encrypt secrets using a third-party tool before adding them to the cache",
            "D": "Avoid using secrets in the configuration cache altogether"
        },
        "correct_answer": "B",
        "explanation": "A recommended practice for handling secrets in the configuration cache is to use the `gradle.properties` file for storing secrets securely. This file's content is not part of the configuration cache, only its fingerprint is, which helps mitigate the risk of accidental exposure of sensitive information."
    }
]