name: Main Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true
    - name: Install dependencies
      run: |
        poetry install --with dev
    - name: Run ruff check
      run: |
        source .venv/bin/activate
        ruff check
    - name: Run ruff format check
      run: |
        source .venv/bin/activate
        ruff format --check

  publish:
    needs: lint
    # Only run on push to the main branch
    if: github.ref == 'refs/heads/main' 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true
      - name: Install dependencies
        run: |
          poetry install --no-dev
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Build package
        run: poetry build
      - name: Publish to PyPI
        if: "!contains(steps.get_version.outputs.version, '-dev')"
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}